{
  "address": "0xB40fEf170104dBF45962F90e8ea6505252B9Ed0D",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IPoolAddressesProvider",
          "name": "_aaveAddressProvider",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_uniswapV3Router",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_sushiswapRouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_sushiswapfactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_quickswapV2RouterAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_borrowedAsset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_premium",
          "type": "uint256"
        }
      ],
      "name": "AaveBorrowDetails",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_assetAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LogWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_startToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_startAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_endAmount",
          "type": "uint256"
        }
      ],
      "name": "TokensSwapped",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADDRESSES_PROVIDER",
      "outputs": [
        {
          "internalType": "contract IPoolAddressesProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "POOL",
      "outputs": [
        {
          "internalType": "contract IPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "assets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "premiums",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "params",
          "type": "bytes"
        }
      ],
      "name": "executeOperation",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "quickRouter",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Router02",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token0",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token1",
              "type": "address"
            },
            {
              "internalType": "uint24",
              "name": "pool1Fee",
              "type": "uint24"
            },
            {
              "internalType": "uint256",
              "name": "amount0",
              "type": "uint256"
            },
            {
              "internalType": "uint24",
              "name": "pool2Fee",
              "type": "uint24"
            },
            {
              "internalType": "address",
              "name": "sharedAddress",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "uniuniquick",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "uniquick",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "unisushi",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "quickuni",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "quicksushi",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "sushiuni",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "sushiquick",
              "type": "bool"
            }
          ],
          "internalType": "struct AaveUniQuick.FlashParams",
          "name": "_data",
          "type": "tuple"
        }
      ],
      "name": "startTransaction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapV3Router",
      "outputs": [
        {
          "internalType": "contract ISwapRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_assetAddress",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf695f352f3f5cfefcc1011a39e6e4af87be6c37f3bf5772a9e8f55a4a0c0bfec",
  "receipt": {
    "to": null,
    "from": "0x2b5f645B2bC80E3f9e25b7eDc8d7Edf352Eb4eD3",
    "contractAddress": "0xB40fEf170104dBF45962F90e8ea6505252B9Ed0D",
    "transactionIndex": 77,
    "gasUsed": "3149773",
    "logsBloom": "0x
    "blockHash": "0xa3f84abcbd188d8f578a0ded138bfbc8fc4a5c2a777686fe0572848d65052672",
    "transactionHash": "0xf695f352f3f5cfefcc1011a39e6e4af87be6c37f3bf5772a9e8f55a4a0c0bfec",
    "logs": [
      {
        "transactionIndex": 77,
        "blockNumber": 31738728,
        "transactionHash": "0xf695f352f3f5cfefcc1011a39e6e4af87be6c37f3bf5772a9e8f55a4a0c0bfec",
        "address": "0xB40fEf170104dBF45962F90e8ea6505252B9Ed0D",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002b5f645b2bc80e3f9e25b7edc8d7edf352eb4ed3"
        ],
        "data": "0x",
        "logIndex": 290,
        "blockHash": "0xa3f84abcbd188d8f578a0ded138bfbc8fc4a5c2a777686fe0572848d65052672"
      },
      {
        "transactionIndex": 77,
        "blockNumber": 31738728,
        "transactionHash": "0xf695f352f3f5cfefcc1011a39e6e4af87be6c37f3bf5772a9e8f55a4a0c0bfec",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000002b5f645b2bc80e3f9e25b7edc8d7edf352eb4ed3",
          "0x0000000000000000000000002a998cc0bb43dc510e523fe33c8f1c04bf607a1e"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000187a2da53e6e79f000000000000000000000000000000000000000000000000921e67424cc54761000000000000000000000000000000000000000000002a4ec234f595102def670000000000000000000000000000000000000000000000009096c467f8de5fc2000000000000000000000000000000000000000000002a4ec3bc986f6414d706",
        "logIndex": 291,
        "blockHash": "0xa3f84abcbd188d8f578a0ded138bfbc8fc4a5c2a777686fe0572848d65052672"
      }
    ],
    "blockNumber": 31738728,
    "cumulativeGasUsed": "15480578",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xa97684ead0e402dC232d5A977953DF7ECBaB3CDb",
    "0xE592427A0AEce92De3Edee1F18E0157C05861564",
    "0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506",
    "0xc35DADB65012eC5796536bD9864eD8773aBc74C4",
    "0xa5E0829CaCEd8fFDD4De3c43696c57F7D7A678ff"
  ],
  "numDeployments": 16,
  "solcInputHash": "86984c20807f89c32eabce586b1d6427",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IPoolAddressesProvider\",\"name\":\"_aaveAddressProvider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapV3Router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sushiswapRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sushiswapfactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_quickswapV2RouterAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_borrowedAsset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_premium\",\"type\":\"uint256\"}],\"name\":\"AaveBorrowDetails\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_assetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_startToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_startAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_endAmount\",\"type\":\"uint256\"}],\"name\":\"TokensSwapped\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADDRESSES_PROVIDER\",\"outputs\":[{\"internalType\":\"contract IPoolAddressesProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL\",\"outputs\":[{\"internalType\":\"contract IPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"premiums\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"executeOperation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quickRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"pool1Fee\",\"type\":\"uint24\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint24\",\"name\":\"pool2Fee\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"sharedAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"uniuniquick\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"uniquick\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"unisushi\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"quickuni\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"quicksushi\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"sushiuni\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"sushiquick\",\"type\":\"bool\"}],\"internalType\":\"struct AaveUniQuick.FlashParams\",\"name\":\"_data\",\"type\":\"tuple\"}],\"name\":\"startTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV3Router\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_assetAddress\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdraw(address)\":{\"details\":\"Withdraw asset.\",\"params\":{\"_assetAddress\":\"Asset to be withdrawn.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AaveUniQuick.sol\":\"AaveUniQuick\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xe0c8b625a79bac0fe80f17cfb521e072805cc9cef1c96a5caf45b264e74812fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nlibrary TransferHelper {\\n    /// @notice Transfers tokens from the targeted address to the given destination\\n    /// @notice Errors with 'STF' if transfer fails\\n    /// @param token The contract address of the token to be transferred\\n    /// @param from The originating address from which the tokens will be transferred\\n    /// @param to The destination address of the transfer\\n    /// @param value The amount to be transferred\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\\n    }\\n\\n    /// @notice Transfers tokens from msg.sender to a recipient\\n    /// @dev Errors with ST if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\\n    }\\n\\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\\n    /// @dev Errors with 'SA' if transfer fails\\n    /// @param token The contract address of the token to be approved\\n    /// @param to The target of the approval\\n    /// @param value The amount of the given token the target will be allowed to spend\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\\n    }\\n\\n    /// @notice Transfers ETH to the recipient address\\n    /// @dev Fails with `STE`\\n    /// @param to The destination of the transfer\\n    /// @param value The value to be transferred\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'STE');\\n    }\\n}\\n\",\"keccak256\":\"0x9af98b0908c96320ca6d08b22f0efca864742f6adbe5794cafe2d1d2e808b0cd\",\"license\":\"GPL-2.0-or-later\"},\"contracts/AaveUniQuick.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\npragma abicoder v2;\\r\\n\\r\\nimport \\\"./utils/FlashLoanReceiverBase.sol\\\";\\r\\nimport \\\"./utils/Withdrawable.sol\\\";\\r\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\\\";\\r\\nimport '@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol';\\r\\nimport \\\"./interfaces/IUniswapV2Router02.sol\\\";\\r\\nimport \\\"./interfaces/IUniswapV2Factory.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ncontract AaveUniQuick is FlashLoanReceiverBase, Withdrawable {\\r\\n\\r\\n    //Note: Quickswap and Sushiswap are a fork of Uniswap. So the API are essentially the same.\\r\\n    IUniswapV2Router02 public immutable quickRouter;\\r\\n    ISwapRouter public immutable uniswapV3Router;\\r\\n    address immutable sushiswapRouterAddress;\\r\\n    address immutable sushiswapfactoryAddress;\\r\\n\\r\\n    constructor( \\r\\n    IPoolAddressesProvider _aaveAddressProvider,\\r\\n    address _uniswapV3Router,\\r\\n    address _sushiswapRouter,\\r\\n    address _sushiswapfactory,\\r\\n    address _quickswapV2RouterAddress\\r\\n    ) \\r\\n    FlashLoanReceiverBase(_aaveAddressProvider) {\\r\\n        uniswapV3Router = ISwapRouter(_uniswapV3Router);\\r\\n        quickRouter = IUniswapV2Router02(_quickswapV2RouterAddress);\\r\\n        sushiswapRouterAddress = _sushiswapRouter;\\r\\n        sushiswapfactoryAddress = _sushiswapfactory;\\r\\n    }\\r\\n\\r\\n\\r\\n    struct FlashParams {\\r\\n        address token0; //Token to borrow from Aave\\r\\n        address token1; //second token in the Uniswap borrow pool\\r\\n        uint24 pool1Fee; //Uniswap borrow pool fee tier...This is the fee tier for the pool I borrowed from (fee1...Which is the first pool)\\r\\n        uint256 amount0; //Aave borrow amount\\r\\n        uint24 pool2Fee;\\r\\n        address sharedAddress;\\r\\n        bool uniuniquick;\\r\\n        bool uniquick;\\r\\n        bool unisushi;\\r\\n        bool quickuni;\\r\\n        bool quicksushi;\\r\\n        bool sushiuni;\\r\\n        bool sushiquick;\\r\\n    }\\r\\n\\r\\n\\r\\n    event AaveBorrowDetails(\\r\\n        address indexed _borrowedAsset,\\r\\n        uint indexed _amount,\\r\\n        uint _premium\\r\\n    );\\r\\n\\r\\n    event TokensSwapped(\\r\\n        address indexed _startToken,\\r\\n        uint256 indexed _startAmount,\\r\\n        uint256 _endAmount\\r\\n    );\\r\\n\\r\\n\\r\\n    function executeOperation(\\r\\n            address[] calldata assets,\\r\\n            uint256[] calldata amounts,\\r\\n            uint256[] calldata premiums,\\r\\n            address /* initiator */,\\r\\n            bytes calldata params \\r\\n        )\\r\\n            external\\r\\n            override\\r\\n            returns (bool)\\r\\n        {\\r\\n\\r\\n            address borrowedAsset = assets[0];\\r\\n            uint borrowedAmount = amounts[0];\\r\\n            uint premium = premiums[0];\\r\\n            \\r\\n    //         // This contract now has the funds requested.\\r\\n    //         // Your logic goes here.\\r\\n            require(msg.sender == address(POOL), \\\"Not pool\\\");\\r\\n            uint256 tokenBalance = IERC20(borrowedAsset).balanceOf(address(this));\\r\\n            require(borrowedAmount > 0, \\\"Zero balance\\\");\\r\\n            require(tokenBalance == borrowedAmount, \\\"tokenBalance error!\\\");\\r\\n\\r\\n            emit AaveBorrowDetails(borrowedAsset, borrowedAmount, premium);\\r\\n\\r\\n            (FlashParams memory decoded) = abi.decode(params, (FlashParams));\\r\\n    //         //If you borrowed from Aave, proceed to also start UniswapQuickswaps BUT this time, you\\r\\n    //         //have the borrowed asset from Aave in this contract.\\r\\n            startUniswapV3AndQuickSwaps(decoded);\\r\\n\\r\\n    //         // At the end of your logic above, this contract owes\\r\\n    //         // the flashloaned amounts + premiums.\\r\\n    //         // Therefore ensure your contract has enough to repay\\r\\n    //         // these amounts.\\r\\n            \\r\\n            uint amountOwing = borrowedAmount + premium;\\r\\n            IERC20(borrowedAsset).approve(address(POOL), amountOwing);        \\r\\n            return true;\\r\\n        }\\r\\n\\r\\n\\r\\n        // Flash multiple assets \\r\\n        // function flashloan(address[] memory assets, uint256[] memory amounts) public onlyOwner {\\r\\n        //     _flashloan(assets, amounts);\\r\\n        // }\\r\\n\\r\\n        /*\\r\\n        *  Flash loan 1,000,000,000,000,000,000 wei (1 ether) worth of `_asset`\\r\\n        */\\r\\n\\r\\n    function startTransaction(FlashParams memory _data) public onlyOwner{\\r\\n        address _borrowAsset = _data.token0;\\r\\n        uint256 _borrowAmount = _data.amount0;\\r\\n\\r\\n        bytes memory params = abi.encode(_data);\\r\\n\\r\\n        address[] memory assets = new address[](1);\\r\\n        assets[0] = _borrowAsset;\\r\\n\\r\\n        uint256[] memory amounts = new uint256[](1);\\r\\n        amounts[0] = _borrowAmount;\\r\\n\\r\\n        _flashloan(assets, amounts, params);\\r\\n    }\\r\\n\\r\\n\\r\\n    function _flashloan(address[] memory assets, uint256[] memory amounts, bytes memory params) internal {\\r\\n\\r\\n        //We send the flashloan amount to this contract (receiverAddress) so we can make the arbitrage trade\\r\\n        address receiverAddress = address(this);\\r\\n\\r\\n        address onBehalfOf = address(this);\\r\\n        // bytes memory params = \\\"\\\";\\r\\n        uint16 referralCode = 0;\\r\\n\\r\\n        uint256[] memory modes = new uint256[](assets.length);\\r\\n\\r\\n        // 0 = no debt (flash), 1 = stable, 2 = variable\\r\\n        for (uint256 i = 0; i < assets.length; i++) {\\r\\n            modes[i] = 0;\\r\\n        }\\r\\n\\r\\n\\r\\n        POOL.flashLoan(\\r\\n            receiverAddress,\\r\\n            assets,\\r\\n            amounts,\\r\\n            modes,\\r\\n            onBehalfOf,\\r\\n            params,\\r\\n            referralCode\\r\\n        );\\r\\n    }\\r\\n\\r\\n        function startUniswapV3AndQuickSwaps(FlashParams memory params) internal {\\r\\n\\r\\n        address token0 = params.token0;\\r\\n        address token1 = params.token1;\\r\\n        uint24 pool1Fee = params.pool1Fee;\\r\\n        address sharedAddress = params.sharedAddress;\\r\\n        uint24 pool2Fee = params.pool2Fee;\\r\\n        uint256 amount = params.amount0;\\r\\n\\r\\n        //Get the total balance for token0 (total = Aave borrowed + Uniswap borrowed)\\r\\n        // uint256 amount = IERC20(token0).balanceOf(address(this));\\r\\n        // uint256 amount = IERC20(token0).balanceOf(address(this));\\r\\n\\r\\n        uint256 finalAmountOut;\\r\\n        if(params.uniuniquick){\\r\\n            uint256 amountOut = multihopSwapOnUniswap(\\r\\n                amount,\\r\\n                token0,  //input token\\r\\n                pool1Fee, //fee tier for token0 and sharedAddress pool\\r\\n                sharedAddress, //token common to the pools\\r\\n                pool2Fee, //fee tier for sharedAddress and token1 pool\\r\\n                token1  //output token\\r\\n            );\\r\\n\\r\\n            //If it is greater than zero, then no need to swap again to a different token\\r\\n            //Just use the token we started with so we can repay our debt with it\\r\\n            if(token0 != token1){\\r\\n                finalAmountOut = swapOnQuickswap(\\r\\n                amountOut,\\r\\n                token1,   //input token\\r\\n                token0); //output token\\r\\n            }\\r\\n\\r\\n\\r\\n            emit TokensSwapped(token0, amount, finalAmountOut);\\r\\n        }\\r\\n\\r\\n        if (params.uniquick) {  //uniquick just means swap on uniswap first then quickswap\\r\\n            uint256 amountOut = swapOnUniswap(\\r\\n                amount,\\r\\n                token0,  //input token\\r\\n                token1, //output token\\r\\n                pool1Fee //The pool fee.\\r\\n            );\\r\\n\\r\\n\\r\\n            finalAmountOut = swapOnQuickswap(\\r\\n                amountOut,\\r\\n                token1,   //input token\\r\\n                token0    //output token\\r\\n            );\\r\\n\\r\\n            emit TokensSwapped(token0, amount, finalAmountOut);\\r\\n        }\\r\\n\\r\\n        if(params.unisushi){\\r\\n            uint256 amountOut = swapOnUniswap(\\r\\n                amount,\\r\\n                token0,  //input token\\r\\n                token1, //output token\\r\\n                pool1Fee \\r\\n            );\\r\\n\\r\\n                           //From token1 => targetAsset\\r\\n            finalAmountOut = startSushiswapV2(token1, amountOut, token0);\\r\\n\\r\\n            emit TokensSwapped(token0, amount, finalAmountOut);\\r\\n        }\\r\\n\\r\\n        if(params.quickuni) {\\r\\n            uint256 amountOut = swapOnQuickswap(\\r\\n                amount,\\r\\n                token0,   //input token\\r\\n                token1   //output token\\r\\n            );\\r\\n\\r\\n            finalAmountOut = swapOnUniswap(\\r\\n                amountOut,\\r\\n                token1,  //input token\\r\\n                token0,  //output token\\r\\n                pool1Fee\\r\\n            );\\r\\n\\r\\n            emit TokensSwapped(token0, amount, finalAmountOut);\\r\\n        }\\r\\n\\r\\n        if(params.quicksushi){\\r\\n            uint256 amountOut = swapOnQuickswap(\\r\\n                amount,\\r\\n                token0,   //input token\\r\\n                token1   //output token\\r\\n            );\\r\\n\\r\\n                            //From token1 => targetAsset\\r\\n            finalAmountOut = startSushiswapV2(token1, amountOut, token0);\\r\\n\\r\\n            emit TokensSwapped(token0, amount, finalAmountOut);\\r\\n        }\\r\\n\\r\\n        if(params.sushiuni){\\r\\n                           //From token0 => targetAsset\\r\\n            uint256 amountOut = startSushiswapV2(token0, amount, token1);\\r\\n            \\r\\n            finalAmountOut = swapOnUniswap(\\r\\n                amountOut,\\r\\n                token1,  //input token\\r\\n                token0,  //output token\\r\\n                pool1Fee\\r\\n            );\\r\\n\\r\\n            emit TokensSwapped(token0, amount, finalAmountOut);\\r\\n\\r\\n        }\\r\\n        \\r\\n        if(params.sushiquick){\\r\\n            uint256 amountOut = startSushiswapV2(token0, amount, token1);\\r\\n\\r\\n            finalAmountOut = swapOnQuickswap(\\r\\n                amountOut,\\r\\n                token1,   //input token\\r\\n                token0    //output token\\r\\n            );\\r\\n\\r\\n            emit TokensSwapped(token0, amount, finalAmountOut);\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    function swapOnUniswap(\\r\\n        uint256 amountIn,\\r\\n        address inputToken,\\r\\n        address outputToken,\\r\\n        uint24 poolFee\\r\\n    ) internal returns (uint256 amountOut) {\\r\\n        TransferHelper.safeApprove(inputToken, address(uniswapV3Router), amountIn);\\r\\n        \\r\\n            ISwapRouter.ExactInputSingleParams memory params = \\r\\n                ISwapRouter.ExactInputSingleParams({\\r\\n                    tokenIn: inputToken,\\r\\n                    tokenOut: outputToken,\\r\\n                    fee: poolFee,\\r\\n                    recipient: address(this),  //Where the outbound token amount goes to\\r\\n                    deadline: block.timestamp + 200,\\r\\n                    amountIn: amountIn,\\r\\n                    amountOutMinimum: 0,\\r\\n                    sqrtPriceLimitX96: 0\\r\\n                });\\r\\n\\r\\n        //The call to `exactInputSingle` executes the swap.\\r\\n        amountOut = uniswapV3Router.exactInputSingle(params);        \\r\\n    }   \\r\\n\\r\\n\\r\\n    function multihopSwapOnUniswap(\\r\\n    uint256 amountIn,\\r\\n    address inputToken,\\r\\n    uint24 pool1Fee,\\r\\n    address sharedAddress,\\r\\n    uint24 pool2Fee,\\r\\n    address outputToken\\r\\n    ) internal returns (uint256 amountOut) {\\r\\n        TransferHelper.safeApprove(inputToken, address(uniswapV3Router), amountIn);\\r\\n        \\r\\n        // Multiple pool swaps are encoded through bytes called a `path`. A path is a sequence of token addresses and poolFees that define the pools used in the swaps.\\r\\n        // The format for pool encoding is (tokenIn, fee, tokenOut/tokenIn, fee, tokenOut) where tokenIn/tokenOut parameter is the shared token across the pools.\\r\\n        // Since we are swapping DAI to USDC and then USDC to WETH9 the path encoding is (DAI, 0.3%, USDC, 0.3%, WETH9).\\r\\n        ISwapRouter.ExactInputParams memory params = ISwapRouter\\r\\n            .ExactInputParams({\\r\\n                path: abi.encodePacked(\\r\\n                    inputToken,\\r\\n                    pool1Fee,\\r\\n                    sharedAddress, //e.g dai to weth to usdc ...Then weth is the shared address\\r\\n                    pool2Fee,\\r\\n                    outputToken\\r\\n                ),\\r\\n                recipient: address(this),\\r\\n                deadline: block.timestamp + 200,\\r\\n                amountIn: amountIn,\\r\\n                amountOutMinimum: 0\\r\\n            });\\r\\n\\r\\n        // The call to `exactInput` executes the multihop swap.\\r\\n        amountOut = uniswapV3Router.exactInput(params);\\r\\n        \\r\\n    }\\r\\n\\r\\n\\r\\n    function swapOnQuickswap(\\r\\n        uint256 amountIn,\\r\\n        address inputToken,\\r\\n        address outputToken\\r\\n    ) internal returns (uint256 amountOut) {\\r\\n         //+-We allow the router of QuickSwapRouter to spend all our tokens that are neccesary in doing the trade:\\r\\n        IERC20(inputToken).approve(address(quickRouter), amountIn);\\r\\n\\r\\n         //+-Array of the 2 Tokens Addresses:\\r\\n        address[] memory path = new address[](2);\\r\\n\\r\\n        //+-Defines the Direction of the Trade (From Token0 to Token1 or vice versa):\\r\\n        path[0] = inputToken;  //path[0] is the token we want to sell\\r\\n        path[1] = outputToken;\\r\\n\\r\\n        //+-We Sell in QuickSwap the Tokens we Borrowed \\r\\n        amountOut = quickRouter.swapExactTokensForTokens(\\r\\n            amountIn, /**+-Amount of Tokens we are going to Sell.*/\\r\\n            0, /**+-Minimum Amount of Tokens that we expect to receive in exchange for our Tokens.*/\\r\\n            path, /**+-We tell SushiSwap what Token to Sell and what Token to Buy.*/\\r\\n            address(this), /**+-Address of this S.C. where the Output Tokens are going to be received.*/\\r\\n            block.timestamp + 200 /**+-Time Limit after which an order will be rejected by SushiSwap(It is mainly useful if you send an Order directly from your wallet).*/\\r\\n        )[1];\\r\\n    }\\r\\n\\r\\n    function startSushiswapV2(address _startAsset, uint256 _amount, address _targetAsset) internal returns(uint256){\\r\\n\\r\\n        // Get pool address and check if it exists\\r\\n        address poolAddress = IUniswapV2Factory(sushiswapfactoryAddress).getPair(\\r\\n            _startAsset,\\r\\n            _targetAsset\\r\\n        );\\r\\n\\r\\n        require(poolAddress != address(0), \\\"Pool not found!\\\");\\r\\n                \\r\\n        uint256 amountOut = _swapTokens(\\r\\n            _amount,\\r\\n            sushiswapRouterAddress,\\r\\n            _startAsset,\\r\\n            _targetAsset\\r\\n        );\\r\\n\\r\\n        return amountOut;\\r\\n    }\\r\\n\\r\\n     function _swapTokens(\\r\\n            uint256 amountIn,\\r\\n            address routerAddress,\\r\\n            address sell_token,\\r\\n            address buy_token\\r\\n        ) internal returns (uint256) {\\r\\n        IERC20(sell_token).approve(routerAddress, amountIn);\\r\\n\\r\\n        uint256 amountOutMin = (_getPrice(\\r\\n            routerAddress,\\r\\n            sell_token,\\r\\n            buy_token,\\r\\n            amountIn\\r\\n        ) * 95) / 100; //Meaning I am expecting to receive at least 95% of the price out.\\r\\n\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = sell_token;\\r\\n        path[1] = buy_token;\\r\\n\\r\\n        uint256 amountReceived = IUniswapV2Router02(routerAddress)\\r\\n            .swapExactTokensForTokens(\\r\\n                amountIn, /* Amount of Tokens we are going to Sell. */\\r\\n                amountOutMin, /* Minimum Amount of Tokens that we expect to receive in exchange for our Tokens. */\\r\\n                path, /* We tell SushiSwap what token to sell and what token to Buy. */\\r\\n                address(this), /* Address of where the Output Tokens are going to be received. i.e this contract address(this) */\\r\\n                block.timestamp + 200 /* Time Limit after which an order will be rejected by SushiSwap(It is mainly useful if you send an Order directly from your wallet). */\\r\\n            )[1];\\r\\n        return amountReceived;\\r\\n    }\\r\\n\\r\\n     function _getPrice(\\r\\n        address routerAddress,\\r\\n        address sell_token,\\r\\n        address buy_token,\\r\\n        uint256 amount\\r\\n    ) internal view returns (uint256 price) {\\r\\n        address[] memory pairs = new address[](2);\\r\\n        pairs[0] = sell_token;\\r\\n        pairs[1] = buy_token;\\r\\n\\r\\n        //The return price is in Eth...So you can always multiply by 10**18 to convert to wei\\r\\n        price = IUniswapV2Router02(routerAddress).getAmountsOut(\\r\\n            amount,\\r\\n            pairs\\r\\n        )[1];\\r\\n\\r\\n    }\\r\\n}\\r\\n\\r\\n\",\"keccak256\":\"0x2a9a85564fc45e78e6111d4b37f5dcb3272bd1909c3fe3205ac4ba53dc5101d2\",\"license\":\"MIT\"},\"contracts/interfaces/IFlashLoanReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.4;\\n\\nimport {IPoolAddressesProvider} from './IPoolAddressesProvider.sol';\\nimport {IPool} from './IPool.sol';\\n\\n/**\\n * @title IFlashLoanReceiver\\n * @author Aave\\n * @notice Defines the basic interface of a flashloan-receiver contract.\\n * @dev Implement this interface to develop a flashloan-compatible flashLoanReceiver contract\\n **/\\ninterface IFlashLoanReceiver {\\n  /**\\n   * @notice Executes an operation after receiving the flash-borrowed assets\\n   * @dev Ensure that the contract can return the debt + premium, e.g., has\\n   *      enough funds to repay and has approved the Pool to pull the total amount\\n   * @param assets The addresses of the flash-borrowed assets\\n   * @param amounts The amounts of the flash-borrowed assets\\n   * @param premiums The fee of each flash-borrowed asset\\n   * @param initiator The address of the flashloan initiator\\n   * @param params The byte-encoded params passed when initiating the flashloan\\n   * @return True if the execution of the operation succeeds, false otherwise\\n   */\\n  function executeOperation(\\n    address[] calldata assets,\\n    uint256[] calldata amounts,\\n    uint256[] calldata premiums,\\n    address initiator,\\n    bytes calldata params\\n  ) external returns (bool);\\n\\n  function ADDRESSES_PROVIDER() external view returns (IPoolAddressesProvider);\\n\\n  function POOL() external view returns (IPool);\\n}\",\"keccak256\":\"0x4c76c035fc8c8c24cf3f087bbfd3fa64d4635c02dfdcf2d73f038e2c86aa6530\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IPool.sol\":{\"content\":\"// This is a file copied from https://github.com/aave/aave-v3-core/blob/e46341caf815edc268893f4f9398035f242375d9/contracts/interfaces/IPool.sol\\n// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.4;\\n\\nimport {IPoolAddressesProvider} from \\\"./IPoolAddressesProvider.sol\\\";\\nimport {DataTypes} from \\\"./../libraries/DataTypes.sol\\\";\\n\\n/**\\n * @title IPool\\n * @author Aave\\n * @notice Defines the basic interface for an Aave Pool.\\n **/\\ninterface IPool {\\n    /**\\n     * @dev Emitted on mintUnbacked()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address initiating the supply\\n     * @param onBehalfOf The beneficiary of the supplied assets, receiving the aTokens\\n     * @param amount The amount of supplied assets\\n     * @param referralCode The referral code used\\n     **/\\n    event MintUnbacked(\\n        address indexed reserve,\\n        address user,\\n        address indexed onBehalfOf,\\n        uint256 amount,\\n        uint16 indexed referralCode\\n    );\\n\\n    /**\\n     * @dev Emitted on backUnbacked()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param backer The address paying for the backing\\n     * @param amount The amount added as backing\\n     * @param fee The amount paid in fees\\n     **/\\n    event BackUnbacked(\\n        address indexed reserve,\\n        address indexed backer,\\n        uint256 amount,\\n        uint256 fee\\n    );\\n\\n    /**\\n     * @dev Emitted on supply()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address initiating the supply\\n     * @param onBehalfOf The beneficiary of the supply, receiving the aTokens\\n     * @param amount The amount supplied\\n     * @param referralCode The referral code used\\n     **/\\n    event Supply(\\n        address indexed reserve,\\n        address user,\\n        address indexed onBehalfOf,\\n        uint256 amount,\\n        uint16 indexed referralCode\\n    );\\n\\n    /**\\n     * @dev Emitted on withdraw()\\n     * @param reserve The address of the underlying asset being withdrawn\\n     * @param user The address initiating the withdrawal, owner of aTokens\\n     * @param to The address that will receive the underlying\\n     * @param amount The amount to be withdrawn\\n     **/\\n    event Withdraw(\\n        address indexed reserve,\\n        address indexed user,\\n        address indexed to,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\n     * @param reserve The address of the underlying asset being borrowed\\n     * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\n     * initiator of the transaction on flashLoan()\\n     * @param onBehalfOf The address that will be getting the debt\\n     * @param amount The amount borrowed out\\n     * @param interestRateMode The rate mode: 1 for Stable, 2 for Variable\\n     * @param borrowRate The numeric rate at which the user has borrowed, expressed in ray\\n     * @param referralCode The referral code used\\n     **/\\n    event Borrow(\\n        address indexed reserve,\\n        address user,\\n        address indexed onBehalfOf,\\n        uint256 amount,\\n        DataTypes.InterestRateMode interestRateMode,\\n        uint256 borrowRate,\\n        uint16 indexed referralCode\\n    );\\n\\n    /**\\n     * @dev Emitted on repay()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The beneficiary of the repayment, getting his debt reduced\\n     * @param repayer The address of the user initiating the repay(), providing the funds\\n     * @param amount The amount repaid\\n     * @param useATokens True if the repayment is done using aTokens, `false` if done with underlying asset directly\\n     **/\\n    event Repay(\\n        address indexed reserve,\\n        address indexed user,\\n        address indexed repayer,\\n        uint256 amount,\\n        bool useATokens\\n    );\\n\\n    /**\\n     * @dev Emitted on swapBorrowRateMode()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address of the user swapping his rate mode\\n     * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\\n     **/\\n    event SwapBorrowRateMode(\\n        address indexed reserve,\\n        address indexed user,\\n        DataTypes.InterestRateMode interestRateMode\\n    );\\n\\n    /**\\n     * @dev Emitted on borrow(), repay() and liquidationCall() when using isolated assets\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param totalDebt The total isolation mode debt for the reserve\\n     */\\n    event IsolationModeTotalDebtUpdated(\\n        address indexed asset,\\n        uint256 totalDebt\\n    );\\n\\n    /**\\n     * @dev Emitted when the user selects a certain asset category for eMode\\n     * @param user The address of the user\\n     * @param categoryId The category id\\n     **/\\n    event UserEModeSet(address indexed user, uint8 categoryId);\\n\\n    /**\\n     * @dev Emitted on setUserUseReserveAsCollateral()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address of the user enabling the usage as collateral\\n     **/\\n    event ReserveUsedAsCollateralEnabled(\\n        address indexed reserve,\\n        address indexed user\\n    );\\n\\n    /**\\n     * @dev Emitted on setUserUseReserveAsCollateral()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address of the user enabling the usage as collateral\\n     **/\\n    event ReserveUsedAsCollateralDisabled(\\n        address indexed reserve,\\n        address indexed user\\n    );\\n\\n    /**\\n     * @dev Emitted on rebalanceStableBorrowRate()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address of the user for which the rebalance has been executed\\n     **/\\n    event RebalanceStableBorrowRate(\\n        address indexed reserve,\\n        address indexed user\\n    );\\n\\n    /**\\n     * @dev Emitted on flashLoan()\\n     * @param target The address of the flash loan receiver contract\\n     * @param initiator The address initiating the flash loan\\n     * @param asset The address of the asset being flash borrowed\\n     * @param amount The amount flash borrowed\\n     * @param interestRateMode The flashloan mode: 0 for regular flashloan, 1 for Stable debt, 2 for Variable debt\\n     * @param premium The fee flash borrowed\\n     * @param referralCode The referral code used\\n     **/\\n    event FlashLoan(\\n        address indexed target,\\n        address initiator,\\n        address indexed asset,\\n        uint256 amount,\\n        DataTypes.InterestRateMode interestRateMode,\\n        uint256 premium,\\n        uint16 indexed referralCode\\n    );\\n\\n    /**\\n     * @dev Emitted when a borrower is liquidated.\\n     * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n     * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n     * @param user The address of the borrower getting liquidated\\n     * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n     * @param liquidatedCollateralAmount The amount of collateral received by the liquidator\\n     * @param liquidator The address of the liquidator\\n     * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n     * to receive the underlying collateral asset directly\\n     **/\\n    event LiquidationCall(\\n        address indexed collateralAsset,\\n        address indexed debtAsset,\\n        address indexed user,\\n        uint256 debtToCover,\\n        uint256 liquidatedCollateralAmount,\\n        address liquidator,\\n        bool receiveAToken\\n    );\\n\\n    /**\\n     * @dev Emitted when the state of a reserve is updated.\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param liquidityRate The next liquidity rate\\n     * @param stableBorrowRate The next stable borrow rate\\n     * @param variableBorrowRate The next variable borrow rate\\n     * @param liquidityIndex The next liquidity index\\n     * @param variableBorrowIndex The next variable borrow index\\n     **/\\n    event ReserveDataUpdated(\\n        address indexed reserve,\\n        uint256 liquidityRate,\\n        uint256 stableBorrowRate,\\n        uint256 variableBorrowRate,\\n        uint256 liquidityIndex,\\n        uint256 variableBorrowIndex\\n    );\\n\\n    /**\\n     * @dev Emitted when the protocol treasury receives minted aTokens from the accrued interest.\\n     * @param reserve The address of the reserve\\n     * @param amountMinted The amount minted to the treasury\\n     **/\\n    event MintedToTreasury(address indexed reserve, uint256 amountMinted);\\n\\n    /**\\n     * @dev Mints an `amount` of aTokens to the `onBehalfOf`\\n     * @param asset The address of the underlying asset to mint\\n     * @param amount The amount to mint\\n     * @param onBehalfOf The address that will receive the aTokens\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     **/\\n    function mintUnbacked(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode\\n    ) external;\\n\\n    /**\\n     * @dev Back the current unbacked underlying with `amount` and pay `fee`.\\n     * @param asset The address of the underlying asset to back\\n     * @param amount The amount to back\\n     * @param fee The amount paid in fees\\n     **/\\n    function backUnbacked(\\n        address asset,\\n        uint256 amount,\\n        uint256 fee\\n    ) external;\\n\\n    /**\\n     * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n     * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\n     * @param asset The address of the underlying asset to supply\\n     * @param amount The amount to be supplied\\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n     *   is a different wallet\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     **/\\n    function supply(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode\\n    ) external;\\n\\n    /**\\n     * @notice Supply with transfer approval of asset to be supplied done via permit function\\n     * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\\n     * @param asset The address of the underlying asset to supply\\n     * @param amount The amount to be supplied\\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n     *   is a different wallet\\n     * @param deadline The deadline timestamp that the permit is valid\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     * @param permitV The V parameter of ERC712 permit sig\\n     * @param permitR The R parameter of ERC712 permit sig\\n     * @param permitS The S parameter of ERC712 permit sig\\n     **/\\n    function supplyWithPermit(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode,\\n        uint256 deadline,\\n        uint8 permitV,\\n        bytes32 permitR,\\n        bytes32 permitS\\n    ) external;\\n\\n    /**\\n     * @notice Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n     * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n     * @param asset The address of the underlying asset to withdraw\\n     * @param amount The underlying amount to be withdrawn\\n     *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n     * @param to The address that will receive the underlying, same as msg.sender if the user\\n     *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n     *   different wallet\\n     * @return The final amount withdrawn\\n     **/\\n    function withdraw(\\n        address asset,\\n        uint256 amount,\\n        address to\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n     * already supplied enough collateral, or he was given enough allowance by a credit delegator on the\\n     * corresponding debt token (StableDebtToken or VariableDebtToken)\\n     * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n     *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n     * @param asset The address of the underlying asset to borrow\\n     * @param amount The amount to be borrowed\\n     * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n     * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     * @param onBehalfOf The address of the user who will receive the debt. Should be the address of the borrower itself\\n     * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\n     * if he has been given credit delegation allowance\\n     **/\\n    function borrow(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode,\\n        uint16 referralCode,\\n        address onBehalfOf\\n    ) external;\\n\\n    /**\\n     * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n     * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n     * @param asset The address of the borrowed underlying asset previously borrowed\\n     * @param amount The amount to repay\\n     * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n     * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n     * @param onBehalfOf The address of the user who will get his debt reduced/removed. Should be the address of the\\n     * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n     * other borrower whose debt should be removed\\n     * @return The final amount repaid\\n     **/\\n    function repay(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode,\\n        address onBehalfOf\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Repay with transfer approval of asset to be repaid done via permit function\\n     * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\\n     * @param asset The address of the borrowed underlying asset previously borrowed\\n     * @param amount The amount to repay\\n     * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n     * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n     * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\n     * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n     * other borrower whose debt should be removed\\n     * @param deadline The deadline timestamp that the permit is valid\\n     * @param permitV The V parameter of ERC712 permit sig\\n     * @param permitR The R parameter of ERC712 permit sig\\n     * @param permitS The S parameter of ERC712 permit sig\\n     * @return The final amount repaid\\n     **/\\n    function repayWithPermit(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode,\\n        address onBehalfOf,\\n        uint256 deadline,\\n        uint8 permitV,\\n        bytes32 permitR,\\n        bytes32 permitS\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Repays a borrowed `amount` on a specific reserve using the reserve aTokens, burning the\\n     * equivalent debt tokens\\n     * - E.g. User repays 100 USDC using 100 aUSDC, burning 100 variable/stable debt tokens\\n     * @dev  Passing uint256.max as amount will clean up any residual aToken dust balance, if the user aToken\\n     * balance is not enough to cover the whole debt\\n     * @param asset The address of the borrowed underlying asset previously borrowed\\n     * @param amount The amount to repay\\n     * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n     * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n     * @return The final amount repaid\\n     **/\\n    function repayWithATokens(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Allows a borrower to swap his debt between stable and variable mode, or vice versa\\n     * @param asset The address of the underlying asset borrowed\\n     * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\\n     **/\\n    function swapBorrowRateMode(address asset, uint256 interestRateMode)\\n        external;\\n\\n    /**\\n     * @notice Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\n     * - Users can be rebalanced if the following conditions are satisfied:\\n     *     1. Usage ratio is above 95%\\n     *     2. the current supply APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too\\n     *        much has been borrowed at a stable rate and suppliers are not earning enough\\n     * @param asset The address of the underlying asset borrowed\\n     * @param user The address of the user to be rebalanced\\n     **/\\n    function rebalanceStableBorrowRate(address asset, address user) external;\\n\\n    /**\\n     * @notice Allows suppliers to enable/disable a specific supplied asset as collateral\\n     * @param asset The address of the underlying asset supplied\\n     * @param useAsCollateral True if the user wants to use the supply as collateral, false otherwise\\n     **/\\n    function setUserUseReserveAsCollateral(address asset, bool useAsCollateral)\\n        external;\\n\\n    /**\\n     * @notice Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\n     * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\n     *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\n     * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n     * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n     * @param user The address of the borrower getting liquidated\\n     * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n     * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n     * to receive the underlying collateral asset directly\\n     **/\\n    function liquidationCall(\\n        address collateralAsset,\\n        address debtAsset,\\n        address user,\\n        uint256 debtToCover,\\n        bool receiveAToken\\n    ) external;\\n\\n    /**\\n     * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\\n     * as long as the amount taken plus a fee is returned.\\n     * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\\n     * into consideration. For further details please visit https://developers.aave.com\\n     * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanReceiver interface\\n     * @param assets The addresses of the assets being flash-borrowed\\n     * @param amounts The amounts of the assets being flash-borrowed\\n     * @param interestRateModes Types of the debt to open if the flash loan is not returned:\\n     *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\n     *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n     *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n     * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\n     * @param params Variadic packed params to pass to the receiver as extra information\\n     * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     **/\\n    function flashLoan(\\n        address receiverAddress,\\n        address[] calldata assets,\\n        uint256[] calldata amounts,\\n        uint256[] calldata interestRateModes,\\n        address onBehalfOf,\\n        bytes calldata params,\\n        uint16 referralCode\\n    ) external;\\n\\n    /**\\n     * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\\n     * as long as the amount taken plus a fee is returned.\\n     * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\\n     * into consideration. For further details please visit https://developers.aave.com\\n     * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanSimpleReceiver interface\\n     * @param asset The address of the asset being flash-borrowed\\n     * @param amount The amount of the asset being flash-borrowed\\n     * @param params Variadic packed params to pass to the receiver as extra information\\n     * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     **/\\n    function flashLoanSimple(\\n        address receiverAddress,\\n        address asset,\\n        uint256 amount,\\n        bytes calldata params,\\n        uint16 referralCode\\n    ) external;\\n\\n    /**\\n     * @notice Returns the user account data across all the reserves\\n     * @param user The address of the user\\n     * @return totalCollateralBase The total collateral of the user in the base currency used by the price feed\\n     * @return totalDebtBase The total debt of the user in the base currency used by the price feed\\n     * @return availableBorrowsBase The borrowing power left of the user in the base currency used by the price feed\\n     * @return currentLiquidationThreshold The liquidation threshold of the user\\n     * @return ltv The loan to value of The user\\n     * @return healthFactor The current health factor of the user\\n     **/\\n    function getUserAccountData(address user)\\n        external\\n        view\\n        returns (\\n            uint256 totalCollateralBase,\\n            uint256 totalDebtBase,\\n            uint256 availableBorrowsBase,\\n            uint256 currentLiquidationThreshold,\\n            uint256 ltv,\\n            uint256 healthFactor\\n        );\\n\\n    /**\\n     * @notice Initializes a reserve, activating it, assigning an aToken and debt tokens and an\\n     * interest rate strategy\\n     * @dev Only callable by the PoolConfigurator contract\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param aTokenAddress The address of the aToken that will be assigned to the reserve\\n     * @param stableDebtAddress The address of the StableDebtToken that will be assigned to the reserve\\n     * @param variableDebtAddress The address of the VariableDebtToken that will be assigned to the reserve\\n     * @param interestRateStrategyAddress The address of the interest rate strategy contract\\n     **/\\n    function initReserve(\\n        address asset,\\n        address aTokenAddress,\\n        address stableDebtAddress,\\n        address variableDebtAddress,\\n        address interestRateStrategyAddress\\n    ) external;\\n\\n    /**\\n     * @notice Drop a reserve\\n     * @dev Only callable by the PoolConfigurator contract\\n     * @param asset The address of the underlying asset of the reserve\\n     **/\\n    function dropReserve(address asset) external;\\n\\n    /**\\n     * @notice Updates the address of the interest rate strategy contract\\n     * @dev Only callable by the PoolConfigurator contract\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param rateStrategyAddress The address of the interest rate strategy contract\\n     **/\\n    function setReserveInterestRateStrategyAddress(\\n        address asset,\\n        address rateStrategyAddress\\n    ) external;\\n\\n    /**\\n     * @notice Sets the configuration bitmap of the reserve as a whole\\n     * @dev Only callable by the PoolConfigurator contract\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param configuration The new configuration bitmap\\n     **/\\n    function setConfiguration(\\n        address asset,\\n        DataTypes.ReserveConfigurationMap calldata configuration\\n    ) external;\\n\\n    /**\\n     * @notice Returns the configuration of the reserve\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The configuration of the reserve\\n     **/\\n    function getConfiguration(address asset)\\n        external\\n        view\\n        returns (DataTypes.ReserveConfigurationMap memory);\\n\\n    /**\\n     * @notice Returns the configuration of the user across all the reserves\\n     * @param user The user address\\n     * @return The configuration of the user\\n     **/\\n    function getUserConfiguration(address user)\\n        external\\n        view\\n        returns (DataTypes.UserConfigurationMap memory);\\n\\n    /**\\n     * @notice Returns the normalized income normalized income of the reserve\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The reserve's normalized income\\n     */\\n    function getReserveNormalizedIncome(address asset)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice Returns the normalized variable debt per unit of asset\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The reserve normalized variable debt\\n     */\\n    function getReserveNormalizedVariableDebt(address asset)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice Returns the state and configuration of the reserve\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The state and configuration data of the reserve\\n     **/\\n    function getReserveData(address asset)\\n        external\\n        view\\n        returns (DataTypes.ReserveData memory);\\n\\n    /**\\n     * @notice Validates and finalizes an aToken transfer\\n     * @dev Only callable by the overlying aToken of the `asset`\\n     * @param asset The address of the underlying asset of the aToken\\n     * @param from The user from which the aTokens are transferred\\n     * @param to The user receiving the aTokens\\n     * @param amount The amount being transferred/withdrawn\\n     * @param balanceFromBefore The aToken balance of the `from` user before the transfer\\n     * @param balanceToBefore The aToken balance of the `to` user before the transfer\\n     */\\n    function finalizeTransfer(\\n        address asset,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 balanceFromBefore,\\n        uint256 balanceToBefore\\n    ) external;\\n\\n    /**\\n     * @notice Returns the list of the underlying assets of all the initialized reserves\\n     * @dev It does not include dropped reserves\\n     * @return The addresses of the underlying assets of the initialized reserves\\n     **/\\n    function getReservesList() external view returns (address[] memory);\\n\\n    /**\\n     * @notice Returns the address of the underlying asset of a reserve by the reserve id as stored in the DataTypes.ReserveData struct\\n     * @param id The id of the reserve as stored in the DataTypes.ReserveData struct\\n     * @return The address of the reserve associated with id\\n     **/\\n    function getReserveAddressById(uint16 id) external view returns (address);\\n\\n    /**\\n     * @notice Returns the PoolAddressesProvider connected to this contract\\n     * @return The address of the PoolAddressesProvider\\n     **/\\n    function ADDRESSES_PROVIDER()\\n        external\\n        view\\n        returns (IPoolAddressesProvider);\\n\\n    /**\\n     * @notice Updates the protocol fee on the bridging\\n     * @param bridgeProtocolFee The part of the premium sent to the protocol treasury\\n     */\\n    function updateBridgeProtocolFee(uint256 bridgeProtocolFee) external;\\n\\n    /**\\n     * @notice Updates flash loan premiums. Flash loan premium consists of two parts:\\n     * - A part is sent to aToken holders as extra, one time accumulated interest\\n     * - A part is collected by the protocol treasury\\n     * @dev The total premium is calculated on the total borrowed amount\\n     * @dev The premium to protocol is calculated on the total premium, being a percentage of `flashLoanPremiumTotal`\\n     * @dev Only callable by the PoolConfigurator contract\\n     * @param flashLoanPremiumTotal The total premium, expressed in bps\\n     * @param flashLoanPremiumToProtocol The part of the premium sent to the protocol treasury, expressed in bps\\n     */\\n    function updateFlashloanPremiums(\\n        uint128 flashLoanPremiumTotal,\\n        uint128 flashLoanPremiumToProtocol\\n    ) external;\\n\\n    /**\\n     * @notice Configures a new category for the eMode.\\n     * @dev In eMode, the protocol allows very high borrowing power to borrow assets of the same category.\\n     * The category 0 is reserved as it's the default for volatile assets\\n     * @param id The id of the category\\n     * @param config The configuration of the category\\n     */\\n    function configureEModeCategory(\\n        uint8 id,\\n        DataTypes.EModeCategory memory config\\n    ) external;\\n\\n    /**\\n     * @notice Returns the data of an eMode category\\n     * @param id The id of the category\\n     * @return The configuration data of the category\\n     */\\n    function getEModeCategoryData(uint8 id)\\n        external\\n        view\\n        returns (DataTypes.EModeCategory memory);\\n\\n    /**\\n     * @notice Allows a user to use the protocol in eMode\\n     * @param categoryId The id of the category\\n     */\\n    function setUserEMode(uint8 categoryId) external;\\n\\n    /**\\n     * @notice Returns the eMode the user is using\\n     * @param user The address of the user\\n     * @return The eMode id\\n     */\\n    function getUserEMode(address user) external view returns (uint256);\\n\\n    /**\\n     * @notice Resets the isolation mode total debt of the given asset to zero\\n     * @dev It requires the given asset has zero debt ceiling\\n     * @param asset The address of the underlying asset to reset the isolationModeTotalDebt\\n     */\\n    function resetIsolationModeTotalDebt(address asset) external;\\n\\n    /**\\n     * @notice Returns the percentage of available liquidity that can be borrowed at once at stable rate\\n     * @return The percentage of available liquidity to borrow, expressed in bps\\n     */\\n    function MAX_STABLE_RATE_BORROW_SIZE_PERCENT()\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice Returns the total fee on flash loans\\n     * @return The total fee on flashloans\\n     */\\n    function FLASHLOAN_PREMIUM_TOTAL() external view returns (uint128);\\n\\n    /**\\n     * @notice Returns the part of the bridge fees sent to protocol\\n     * @return The bridge fee sent to the protocol treasury\\n     */\\n    function BRIDGE_PROTOCOL_FEE() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the part of the flashloan fees sent to protocol\\n     * @return The flashloan fee sent to the protocol treasury\\n     */\\n    function FLASHLOAN_PREMIUM_TO_PROTOCOL() external view returns (uint128);\\n\\n    /**\\n     * @notice Returns the maximum number of reserves supported to be listed in this Pool\\n     * @return The maximum number of reserves supported\\n     */\\n    function MAX_NUMBER_RESERVES() external view returns (uint16);\\n\\n    /**\\n     * @notice Mints the assets accrued through the reserve factor to the treasury in the form of aTokens\\n     * @param assets The list of reserves for which the minting needs to be executed\\n     **/\\n    function mintToTreasury(address[] calldata assets) external;\\n\\n    /**\\n     * @notice Rescue and transfer tokens locked in this contract\\n     * @param token The address of the token\\n     * @param to The address of the recipient\\n     * @param amount The amount of token to transfer\\n     */\\n    function rescueTokens(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) external;\\n\\n    /**\\n     * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n     * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\n     * @dev Deprecated: Use the `supply` function instead\\n     * @param asset The address of the underlying asset to supply\\n     * @param amount The amount to be supplied\\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n     *   is a different wallet\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     **/\\n    function deposit(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode\\n    ) external;\\n}\\n\",\"keccak256\":\"0xb838a74d396e8adcb65da126bb3862e7e9291f4842f247e3f76d34ffc84f0546\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IPoolAddressesProvider.sol\":{\"content\":\"// This is a file copied from https://github.com/aave/aave-v3-core/blob/e46341caf815edc268893f4f9398035f242375d9/contracts/interfaces/IPoolAddressesProvider.sol\\n// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title IPoolAddressesProvider\\n * @author Aave\\n * @notice Defines the basic interface for a Pool Addresses Provider.\\n **/\\ninterface IPoolAddressesProvider {\\n    /**\\n     * @dev Emitted when the market identifier is updated.\\n     * @param oldMarketId The old id of the market\\n     * @param newMarketId The new id of the market\\n     */\\n    event MarketIdSet(string indexed oldMarketId, string indexed newMarketId);\\n\\n    /**\\n     * @dev Emitted when the pool is updated.\\n     * @param oldAddress The old address of the Pool\\n     * @param newAddress The new address of the Pool\\n     */\\n    event PoolUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n    /**\\n     * @dev Emitted when the pool configurator is updated.\\n     * @param oldAddress The old address of the PoolConfigurator\\n     * @param newAddress The new address of the PoolConfigurator\\n     */\\n    event PoolConfiguratorUpdated(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when the price oracle is updated.\\n     * @param oldAddress The old address of the PriceOracle\\n     * @param newAddress The new address of the PriceOracle\\n     */\\n    event PriceOracleUpdated(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when the ACL manager is updated.\\n     * @param oldAddress The old address of the ACLManager\\n     * @param newAddress The new address of the ACLManager\\n     */\\n    event ACLManagerUpdated(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when the ACL admin is updated.\\n     * @param oldAddress The old address of the ACLAdmin\\n     * @param newAddress The new address of the ACLAdmin\\n     */\\n    event ACLAdminUpdated(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when the price oracle sentinel is updated.\\n     * @param oldAddress The old address of the PriceOracleSentinel\\n     * @param newAddress The new address of the PriceOracleSentinel\\n     */\\n    event PriceOracleSentinelUpdated(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when the pool data provider is updated.\\n     * @param oldAddress The old address of the PoolDataProvider\\n     * @param newAddress The new address of the PoolDataProvider\\n     */\\n    event PoolDataProviderUpdated(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when a new proxy is created.\\n     * @param id The identifier of the proxy\\n     * @param proxyAddress The address of the created proxy contract\\n     * @param implementationAddress The address of the implementation contract\\n     */\\n    event ProxyCreated(\\n        bytes32 indexed id,\\n        address indexed proxyAddress,\\n        address indexed implementationAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when a new non-proxied contract address is registered.\\n     * @param id The identifier of the contract\\n     * @param oldAddress The address of the old contract\\n     * @param newAddress The address of the new contract\\n     */\\n    event AddressSet(\\n        bytes32 indexed id,\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when the implementation of the proxy registered with id is updated\\n     * @param id The identifier of the contract\\n     * @param proxyAddress The address of the proxy contract\\n     * @param oldImplementationAddress The address of the old implementation contract\\n     * @param newImplementationAddress The address of the new implementation contract\\n     */\\n    event AddressSetAsProxy(\\n        bytes32 indexed id,\\n        address indexed proxyAddress,\\n        address oldImplementationAddress,\\n        address indexed newImplementationAddress\\n    );\\n\\n    /**\\n     * @notice Returns the id of the Aave market to which this contract points to.\\n     * @return The market id\\n     **/\\n    function getMarketId() external view returns (string memory);\\n\\n    /**\\n     * @notice Associates an id with a specific PoolAddressesProvider.\\n     * @dev This can be used to create an onchain registry of PoolAddressesProviders to\\n     * identify and validate multiple Aave markets.\\n     * @param newMarketId The market id\\n     */\\n    function setMarketId(string calldata newMarketId) external;\\n\\n    /**\\n     * @notice Returns an address by its identifier.\\n     * @dev The returned address might be an EOA or a contract, potentially proxied\\n     * @dev It returns ZERO if there is no registered address with the given id\\n     * @param id The id\\n     * @return The address of the registered for the specified id\\n     */\\n    function getAddress(bytes32 id) external view returns (address);\\n\\n    /**\\n     * @notice General function to update the implementation of a proxy registered with\\n     * certain `id`. If there is no proxy registered, it will instantiate one and\\n     * set as implementation the `newImplementationAddress`.\\n     * @dev IMPORTANT Use this function carefully, only for ids that don't have an explicit\\n     * setter function, in order to avoid unexpected consequences\\n     * @param id The id\\n     * @param newImplementationAddress The address of the new implementation\\n     */\\n    function setAddressAsProxy(bytes32 id, address newImplementationAddress)\\n        external;\\n\\n    /**\\n     * @notice Sets an address for an id replacing the address saved in the addresses map.\\n     * @dev IMPORTANT Use this function carefully, as it will do a hard replacement\\n     * @param id The id\\n     * @param newAddress The address to set\\n     */\\n    function setAddress(bytes32 id, address newAddress) external;\\n\\n    /**\\n     * @notice Returns the address of the Pool proxy.\\n     * @return The Pool proxy address\\n     **/\\n    function getPool() external view returns (address);\\n\\n    /**\\n     * @notice Updates the implementation of the Pool, or creates a proxy\\n     * setting the new `pool` implementation when the function is called for the first time.\\n     * @param newPoolImpl The new Pool implementation\\n     **/\\n    function setPoolImpl(address newPoolImpl) external;\\n\\n    /**\\n     * @notice Returns the address of the PoolConfigurator proxy.\\n     * @return The PoolConfigurator proxy address\\n     **/\\n    function getPoolConfigurator() external view returns (address);\\n\\n    /**\\n     * @notice Updates the implementation of the PoolConfigurator, or creates a proxy\\n     * setting the new `PoolConfigurator` implementation when the function is called for the first time.\\n     * @param newPoolConfiguratorImpl The new PoolConfigurator implementation\\n     **/\\n    function setPoolConfiguratorImpl(address newPoolConfiguratorImpl) external;\\n\\n    /**\\n     * @notice Returns the address of the price oracle.\\n     * @return The address of the PriceOracle\\n     */\\n    function getPriceOracle() external view returns (address);\\n\\n    /**\\n     * @notice Updates the address of the price oracle.\\n     * @param newPriceOracle The address of the new PriceOracle\\n     */\\n    function setPriceOracle(address newPriceOracle) external;\\n\\n    /**\\n     * @notice Returns the address of the ACL manager.\\n     * @return The address of the ACLManager\\n     */\\n    function getACLManager() external view returns (address);\\n\\n    /**\\n     * @notice Updates the address of the ACL manager.\\n     * @param newAclManager The address of the new ACLManager\\n     **/\\n    function setACLManager(address newAclManager) external;\\n\\n    /**\\n     * @notice Returns the address of the ACL admin.\\n     * @return The address of the ACL admin\\n     */\\n    function getACLAdmin() external view returns (address);\\n\\n    /**\\n     * @notice Updates the address of the ACL admin.\\n     * @param newAclAdmin The address of the new ACL admin\\n     */\\n    function setACLAdmin(address newAclAdmin) external;\\n\\n    /**\\n     * @notice Returns the address of the price oracle sentinel.\\n     * @return The address of the PriceOracleSentinel\\n     */\\n    function getPriceOracleSentinel() external view returns (address);\\n\\n    /**\\n     * @notice Updates the address of the price oracle sentinel.\\n     * @param newPriceOracleSentinel The address of the new PriceOracleSentinel\\n     **/\\n    function setPriceOracleSentinel(address newPriceOracleSentinel) external;\\n\\n    /**\\n     * @notice Returns the address of the data provider.\\n     * @return The address of the DataProvider\\n     */\\n    function getPoolDataProvider() external view returns (address);\\n\\n    /**\\n     * @notice Updates the address of the data provider.\\n     * @param newDataProvider The address of the new DataProvider\\n     **/\\n    function setPoolDataProvider(address newDataProvider) external;\\n}\\n\",\"keccak256\":\"0x7cd30705d5b62c61b475790834b111d4e7c8b7cd51c847d896f0e49e46a5c966\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IUniswapV2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// pragma solidity >=0.6.6;\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n\\r\\ninterface IUniswapV2Factory {\\r\\n  event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\r\\n  function getPair(address tokenA, address tokenB) external view returns (address pair);\\r\\n  function allPairs(uint) external view returns (address pair);\\r\\n  function allPairsLength() external view returns (uint);\\r\\n  function feeTo() external view returns (address);\\r\\n  function feeToSetter() external view returns (address);\\r\\n  function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n}\\r\\n\",\"keccak256\":\"0x8437ae770750bb9121d2cb86324937886cd79d764921e70e4aa9f98c79518535\",\"license\":\"MIT\"},\"contracts/interfaces/IUniswapV2Router01.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\n// pragma solidity >=0.6.6;\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n\\r\\ninterface IUniswapV2Router01 {\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapTokensForExactTokens(\\r\\n        uint amountOut,\\r\\n        uint amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n\\r\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\r\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\r\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\r\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n}\\r\\n\",\"keccak256\":\"0x68d355744a977e0dc9c1ec301dd7c9fa27aa42a65618e148f34916795a7896d3\",\"license\":\"MIT\"},\"contracts/interfaces/IUniswapV2Router02.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\n// pragma solidity >=0.6.6;\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport './IUniswapV2Router01.sol';\\r\\n\\r\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountETH);\\r\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountETH);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable;\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x36175e8bcd2392eb71a11035c0b6272819782e4a47048a57a3c11c522eff9207\",\"license\":\"MIT\"},\"contracts/libraries/DataTypes.sol\":{\"content\":\"// This is a file copied from https://github.com/aave/aave-v3-core/blob/e46341caf815edc268893f4f9398035f242375d9/contracts/protocol/libraries/types/DataTypes.sol\\n// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nlibrary DataTypes {\\n    struct ReserveData {\\n        //stores the reserve configuration\\n        ReserveConfigurationMap configuration;\\n        //the liquidity index. Expressed in ray\\n        uint128 liquidityIndex;\\n        //the current supply rate. Expressed in ray\\n        uint128 currentLiquidityRate;\\n        //variable borrow index. Expressed in ray\\n        uint128 variableBorrowIndex;\\n        //the current variable borrow rate. Expressed in ray\\n        uint128 currentVariableBorrowRate;\\n        //the current stable borrow rate. Expressed in ray\\n        uint128 currentStableBorrowRate;\\n        //timestamp of last update\\n        uint40 lastUpdateTimestamp;\\n        //the id of the reserve. Represents the position in the list of the active reserves\\n        uint16 id;\\n        //aToken address\\n        address aTokenAddress;\\n        //stableDebtToken address\\n        address stableDebtTokenAddress;\\n        //variableDebtToken address\\n        address variableDebtTokenAddress;\\n        //address of the interest rate strategy\\n        address interestRateStrategyAddress;\\n        //the current treasury balance, scaled\\n        uint128 accruedToTreasury;\\n        //the outstanding unbacked aTokens minted through the bridging feature\\n        uint128 unbacked;\\n        //the outstanding debt borrowed against this asset in isolation mode\\n        uint128 isolationModeTotalDebt;\\n    }\\n\\n    struct ReserveConfigurationMap {\\n        //bit 0-15: LTV\\n        //bit 16-31: Liq. threshold\\n        //bit 32-47: Liq. bonus\\n        //bit 48-55: Decimals\\n        //bit 56: reserve is active\\n        //bit 57: reserve is frozen\\n        //bit 58: borrowing is enabled\\n        //bit 59: stable rate borrowing enabled\\n        //bit 60: asset is paused\\n        //bit 61: borrowing in isolation mode is enabled\\n        //bit 62-63: reserved\\n        //bit 64-79: reserve factor\\n        //bit 80-115 borrow cap in whole tokens, borrowCap == 0 => no cap\\n        //bit 116-151 supply cap in whole tokens, supplyCap == 0 => no cap\\n        //bit 152-167 liquidation protocol fee\\n        //bit 168-175 eMode category\\n        //bit 176-211 unbacked mint cap in whole tokens, unbackedMintCap == 0 => minting disabled\\n        //bit 212-251 debt ceiling for isolation mode with (ReserveConfiguration::DEBT_CEILING_DECIMALS) decimals\\n        //bit 252-255 unused\\n\\n        uint256 data;\\n    }\\n\\n    struct UserConfigurationMap {\\n        /**\\n         * @dev Bitmap of the users collaterals and borrows. It is divided in pairs of bits, one pair per asset.\\n         * The first bit indicates if an asset is used as collateral by the user, the second whether an\\n         * asset is borrowed by the user.\\n         */\\n        uint256 data;\\n    }\\n\\n    struct EModeCategory {\\n        // each eMode category has a custom ltv and liquidation threshold\\n        uint16 ltv;\\n        uint16 liquidationThreshold;\\n        uint16 liquidationBonus;\\n        // each eMode category may or may not have a custom oracle to override the individual assets price oracles\\n        address priceSource;\\n        string label;\\n    }\\n\\n    enum InterestRateMode {\\n        NONE,\\n        STABLE,\\n        VARIABLE\\n    }\\n\\n    struct ReserveCache {\\n        uint256 currScaledVariableDebt;\\n        uint256 nextScaledVariableDebt;\\n        uint256 currPrincipalStableDebt;\\n        uint256 currAvgStableBorrowRate;\\n        uint256 currTotalStableDebt;\\n        uint256 nextAvgStableBorrowRate;\\n        uint256 nextTotalStableDebt;\\n        uint256 currLiquidityIndex;\\n        uint256 nextLiquidityIndex;\\n        uint256 currVariableBorrowIndex;\\n        uint256 nextVariableBorrowIndex;\\n        uint256 currLiquidityRate;\\n        uint256 currVariableBorrowRate;\\n        uint256 reserveFactor;\\n        ReserveConfigurationMap reserveConfiguration;\\n        address aTokenAddress;\\n        address stableDebtTokenAddress;\\n        address variableDebtTokenAddress;\\n        uint40 reserveLastUpdateTimestamp;\\n        uint40 stableDebtLastUpdateTimestamp;\\n    }\\n\\n    struct ExecuteLiquidationCallParams {\\n        uint256 reservesCount;\\n        uint256 debtToCover;\\n        address collateralAsset;\\n        address debtAsset;\\n        address user;\\n        bool receiveAToken;\\n        address priceOracle;\\n        uint8 userEModeCategory;\\n        address priceOracleSentinel;\\n    }\\n\\n    struct ExecuteSupplyParams {\\n        address asset;\\n        uint256 amount;\\n        address onBehalfOf;\\n        uint16 referralCode;\\n    }\\n\\n    struct ExecuteBorrowParams {\\n        address asset;\\n        address user;\\n        address onBehalfOf;\\n        uint256 amount;\\n        InterestRateMode interestRateMode;\\n        uint16 referralCode;\\n        bool releaseUnderlying;\\n        uint256 maxStableRateBorrowSizePercent;\\n        uint256 reservesCount;\\n        address oracle;\\n        uint8 userEModeCategory;\\n        address priceOracleSentinel;\\n    }\\n\\n    struct ExecuteRepayParams {\\n        address asset;\\n        uint256 amount;\\n        InterestRateMode interestRateMode;\\n        address onBehalfOf;\\n        bool useATokens;\\n    }\\n\\n    struct ExecuteWithdrawParams {\\n        address asset;\\n        uint256 amount;\\n        address to;\\n        uint256 reservesCount;\\n        address oracle;\\n        uint8 userEModeCategory;\\n    }\\n\\n    struct ExecuteSetUserEModeParams {\\n        uint256 reservesCount;\\n        address oracle;\\n        uint8 categoryId;\\n    }\\n\\n    struct FinalizeTransferParams {\\n        address asset;\\n        address from;\\n        address to;\\n        uint256 amount;\\n        uint256 balanceFromBefore;\\n        uint256 balanceToBefore;\\n        uint256 reservesCount;\\n        address oracle;\\n        uint8 fromEModeCategory;\\n    }\\n\\n    struct FlashloanParams {\\n        address receiverAddress;\\n        address[] assets;\\n        uint256[] amounts;\\n        uint256[] interestRateModes;\\n        address onBehalfOf;\\n        bytes params;\\n        uint16 referralCode;\\n        uint256 flashLoanPremiumToProtocol;\\n        uint256 flashLoanPremiumTotal;\\n        uint256 maxStableRateBorrowSizePercent;\\n        uint256 reservesCount;\\n        address addressesProvider;\\n        uint8 userEModeCategory;\\n        bool isAuthorizedFlashBorrower;\\n    }\\n\\n    struct FlashloanSimpleParams {\\n        address receiverAddress;\\n        address asset;\\n        uint256 amount;\\n        bytes params;\\n        uint16 referralCode;\\n        uint256 flashLoanPremiumToProtocol;\\n        uint256 flashLoanPremiumTotal;\\n    }\\n\\n    struct FlashLoanRepaymentParams {\\n        uint256 amount;\\n        uint256 totalPremium;\\n        uint256 flashLoanPremiumToProtocol;\\n        address asset;\\n        address receiverAddress;\\n        uint16 referralCode;\\n    }\\n\\n    struct CalculateUserAccountDataParams {\\n        UserConfigurationMap userConfig;\\n        uint256 reservesCount;\\n        address user;\\n        address oracle;\\n        uint8 userEModeCategory;\\n    }\\n\\n    struct ValidateBorrowParams {\\n        ReserveCache reserveCache;\\n        UserConfigurationMap userConfig;\\n        address asset;\\n        address userAddress;\\n        uint256 amount;\\n        InterestRateMode interestRateMode;\\n        uint256 maxStableLoanPercent;\\n        uint256 reservesCount;\\n        address oracle;\\n        uint8 userEModeCategory;\\n        address priceOracleSentinel;\\n        bool isolationModeActive;\\n        address isolationModeCollateralAddress;\\n        uint256 isolationModeDebtCeiling;\\n    }\\n\\n    struct ValidateLiquidationCallParams {\\n        ReserveCache debtReserveCache;\\n        uint256 totalDebt;\\n        uint256 healthFactor;\\n        address priceOracleSentinel;\\n    }\\n\\n    struct CalculateInterestRatesParams {\\n        uint256 unbacked;\\n        uint256 liquidityAdded;\\n        uint256 liquidityTaken;\\n        uint256 totalStableDebt;\\n        uint256 totalVariableDebt;\\n        uint256 averageStableBorrowRate;\\n        uint256 reserveFactor;\\n        address reserve;\\n        address aToken;\\n    }\\n\\n    struct InitReserveParams {\\n        address asset;\\n        address aTokenAddress;\\n        address stableDebtAddress;\\n        address variableDebtAddress;\\n        address interestRateStrategyAddress;\\n        uint16 reservesCount;\\n        uint16 maxNumberReserves;\\n    }\\n}\\n\",\"keccak256\":\"0x1712d744f74ab4a3202b41e0732ba9422bbb60bdcde79d684cdcc32f14cf7237\",\"license\":\"BUSL-1.1\"},\"contracts/utils/FlashLoanReceiverBase.sol\":{\"content\":\"// This is a file copied from https://github.com/aave/aave-v3-core/blob/e46341caf815edc268893f4f9398035f242375d9/contracts/flashloan/base/FlashLoanSimpleReceiverBase.sol\\n// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.4;\\n\\nimport {IFlashLoanReceiver} from \\\"./../interfaces/IFlashLoanReceiver.sol\\\";\\nimport {IPoolAddressesProvider} from \\\"./../interfaces/IPoolAddressesProvider.sol\\\";\\nimport {IPool} from \\\"./../interfaces/IPool.sol\\\";\\n\\n/**\\n * @title FlashLoanSimpleReceiverBase\\n * @author Aave\\n * @notice Base contract to develop a flashloan-receiver contract.\\n */\\n \\nabstract contract FlashLoanReceiverBase is IFlashLoanReceiver {\\n    IPoolAddressesProvider public immutable override ADDRESSES_PROVIDER;\\n    IPool public immutable override POOL;\\n\\n    constructor(IPoolAddressesProvider provider) {\\n        ADDRESSES_PROVIDER = provider;\\n        POOL = IPool(provider.getPool());\\n    }\\n}\\n\\n\",\"keccak256\":\"0xdad8b352bd1a55860e16c868f3281d46675a8021e8f0c946c3404ddf82a0a125\",\"license\":\"AGPL-3.0\"},\"contracts/utils/Withdrawable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n// pragma solidity >=0.6.0 <=0.8.13;\\n\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n// import '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n    Ensures that any contract that inherits from this contract is able to\\n    withdraw funds that are accidentally received or stuck.\\n */\\n\\ncontract Withdrawable is Ownable, ReentrancyGuard {\\n    // using SafeERC20 for ERC20;\\n    address constant ETHER = address(0);\\n\\n    event LogWithdraw(\\n        address indexed _from,\\n        address indexed _assetAddress,\\n        uint amount\\n    );\\n\\n    /**\\n     * @dev Withdraw asset.\\n     * @param _assetAddress Asset to be withdrawn.\\n     */\\n    function withdraw(address _assetAddress) public onlyOwner nonReentrant{\\n        uint assetBalance;\\n        if (_assetAddress == ETHER) {\\n            address self = address(this); // workaround for a possible solidity bug\\n            assetBalance = self.balance;\\n            payable(msg.sender).transfer(assetBalance);\\n        } else {\\n            assetBalance = ERC20(_assetAddress).balanceOf(address(this));\\n            ERC20(_assetAddress).transfer(msg.sender, assetBalance);\\n        }\\n        emit LogWithdraw(msg.sender, _assetAddress, assetBalance);\\n    }\\n}\\n\",\"keccak256\":\"0xf230b43202836d9edcd95ab037d5feaa3b185869cd1a15764ba8ebd0d9a1d3d4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101406040523480156200001257600080fd5b5060405162003c0638038062003c0683398181016040528101906200003891906200035f565b848073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b815250508073ffffffffffffffffffffffffffffffffffffffff1663026b1d5f6040518163ffffffff1660e01b815260040160206040518083038186803b158015620000b757600080fd5b505afa158015620000cc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000f2919062000333565b73ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1660601b8152505050620001496200013d6200023960201b60201c565b6200024160201b60201c565b600180819055508373ffffffffffffffffffffffffffffffffffffffff1660e08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508073ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508273ffffffffffffffffffffffffffffffffffffffff166101008173ffffffffffffffffffffffffffffffffffffffff1660601b815250508173ffffffffffffffffffffffffffffffffffffffff166101208173ffffffffffffffffffffffffffffffffffffffff1660601b8152505050505050506200045d565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600081519050620003168162000429565b92915050565b6000815190506200032d8162000443565b92915050565b6000602082840312156200034657600080fd5b6000620003568482850162000305565b91505092915050565b600080600080600060a086880312156200037857600080fd5b600062000388888289016200031c565b95505060206200039b8882890162000305565b9450506040620003ae8882890162000305565b9350506060620003c18882890162000305565b9250506080620003d48882890162000305565b9150509295509295909350565b6000620003ee8262000409565b9050919050565b60006200040282620003e1565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6200043481620003e1565b81146200044057600080fd5b50565b6200044e81620003f5565b81146200045a57600080fd5b50565b60805160601c60a05160601c60c05160601c60e05160601c6101005160601c6101205160601c613708620004fe600039600061193b01526000611a5e0152600081816104560152818161133a015281816113d6015281816117b2015261188201526000818161081c015281816114ac015261169c0152600081816107f80152818161094701528181610b7e0152610e0d015260006101c901526137086000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c80637535d246116100665780637535d246146101215780638d252c621461013f5780638da5cb5b1461015d578063920f5c841461017b578063f2fde38b146101ab5761009e565b80630542975c146100a35780630cbc9759146100c15780632c76d7a6146100dd57806351cff8d9146100fb578063715018a614610117575b600080fd5b6100ab6101c7565b6040516100b89190612db4565b60405180910390f35b6100db60048036038101906100d6919061260e565b6101eb565b005b6100e5610454565b6040516100f29190612dea565b60405180910390f35b6101156004803603810190610110919061246a565b610478565b005b61011f61076e565b005b6101296107f6565b6040516101369190612dcf565b60405180910390f35b61014761081a565b6040516101549190612e05565b60405180910390f35b61016561083e565b6040516101729190612ca1565b60405180910390f35b610195600480360381019061019091906124bc565b610867565b6040516101a29190612d99565b60405180910390f35b6101c560048036038101906101c0919061246a565b610c25565b005b7f000000000000000000000000000000000000000000000000000000000000000081565b6101f3610d1d565b73ffffffffffffffffffffffffffffffffffffffff1661021161083e565b73ffffffffffffffffffffffffffffffffffffffff1614610267576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161025e90612e80565b60405180910390fd5b60008160000151905060008260600151905060008360405160200161028c9190612f5e565b60405160208183030381529060405290506000600167ffffffffffffffff8111156102e0577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561030e5781602001602082028036833780820191505090505b509050838160008151811061034c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506000600167ffffffffffffffff8111156103c9577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156103f75781602001602082028036833780820191505090505b5090508381600081518110610435577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101818152505061044c828285610d25565b505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b610480610d1d565b73ffffffffffffffffffffffffffffffffffffffff1661049e61083e565b73ffffffffffffffffffffffffffffffffffffffff16146104f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104eb90612e80565b60405180910390fd5b6002600154141561053a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053190612f00565b60405180910390fd5b600260018190555060008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156105e45760003090508073ffffffffffffffffffffffffffffffffffffffff163191503373ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f193505050501580156105dd573d6000803e3d6000fd5b50506106fe565b8173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161061d9190612ca1565b60206040518083038186803b15801561063557600080fd5b505afa158015610649573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066d9190612638565b90508173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016106aa929190612d70565b602060405180830381600087803b1580156106c457600080fd5b505af11580156106d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106fc91906125e5565b505b8173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f9207361cc2a04b9c7a06691df1eb87c6a63957ae88bf01d0d18c81e3d12720998360405161075b9190612f7a565b60405180910390a3506001808190555050565b610776610d1d565b73ffffffffffffffffffffffffffffffffffffffff1661079461083e565b73ffffffffffffffffffffffffffffffffffffffff16146107ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107e190612e80565b60405180910390fd5b6107f46000610eab565b565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000808a8a60008181106108a4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020160208101906108b9919061246a565b90506000898960008181106108f7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020135905060008888600081811061093c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002013590507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146109d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ca90612ec0565b60405180910390fd5b60008373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610a0e9190612ca1565b60206040518083038186803b158015610a2657600080fd5b505afa158015610a3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a5e9190612638565b905060008311610aa3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a9a90612ee0565b60405180910390fd5b828114610ae5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610adc90612ea0565b60405180910390fd5b828473ffffffffffffffffffffffffffffffffffffffff167f2e30dc796dffed39db84c7dd3248c08d1852da65e0e3da58b6cde0d73844133784604051610b2c9190612f7a565b60405180910390a360008787810190610b45919061260e565b9050610b5081610f6f565b60008385610b5e9190613185565b90508573ffffffffffffffffffffffffffffffffffffffff1663095ea7b37f0000000000000000000000000000000000000000000000000000000000000000836040518363ffffffff1660e01b8152600401610bbb929190612d70565b602060405180830381600087803b158015610bd557600080fd5b505af1158015610be9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c0d91906125e5565b50600196505050505050509998505050505050505050565b610c2d610d1d565b73ffffffffffffffffffffffffffffffffffffffff16610c4b61083e565b73ffffffffffffffffffffffffffffffffffffffff1614610ca1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9890612e80565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610d11576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d0890612e60565b60405180910390fd5b610d1a81610eab565b50565b600033905090565b60003090506000309050600080865167ffffffffffffffff811115610d73577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015610da15781602001602082028036833780820191505090505b50905060005b8751811015610e0a576000828281518110610deb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250508080610e02906133d1565b915050610da7565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663ab9c4b5d85898985888b896040518863ffffffff1660e01b8152600401610e709796959493929190612ce5565b600060405180830381600087803b158015610e8a57600080fd5b505af1158015610e9e573d6000803e3d6000fd5b5050505050505050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60008160000151905060008260200151905060008360400151905060008460a00151905060008560800151905060008660600151905060008760c0015115611055576000610fc183898888888c611332565b90508673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16146110045761100181888a61148c565b91505b828873ffffffffffffffffffffffffffffffffffffffff167f18704ae982dcd24a1beeeed3ecf045ab0520d7b7519b97adf3e4f40bf7efe3398460405161104b9190612f7a565b60405180910390a3505b8760e00151156110cd57600061106d838989896117aa565b905061107a81888a61148c565b9150828873ffffffffffffffffffffffffffffffffffffffff167f18704ae982dcd24a1beeeed3ecf045ab0520d7b7519b97adf3e4f40bf7efe339846040516110c39190612f7a565b60405180910390a3505b876101000151156111465760006110e6838989896117aa565b90506110f387828a611936565b9150828873ffffffffffffffffffffffffffffffffffffffff167f18704ae982dcd24a1beeeed3ecf045ab0520d7b7519b97adf3e4f40bf7efe3398460405161113c9190612f7a565b60405180910390a3505b876101200151156111bf57600061115e83898961148c565b905061116c81888a896117aa565b9150828873ffffffffffffffffffffffffffffffffffffffff167f18704ae982dcd24a1beeeed3ecf045ab0520d7b7519b97adf3e4f40bf7efe339846040516111b59190612f7a565b60405180910390a3505b876101400151156112375760006111d783898961148c565b90506111e487828a611936565b9150828873ffffffffffffffffffffffffffffffffffffffff167f18704ae982dcd24a1beeeed3ecf045ab0520d7b7519b97adf3e4f40bf7efe3398460405161122d9190612f7a565b60405180910390a3505b876101600151156112b057600061124f888489611936565b905061125d81888a896117aa565b9150828873ffffffffffffffffffffffffffffffffffffffff167f18704ae982dcd24a1beeeed3ecf045ab0520d7b7519b97adf3e4f40bf7efe339846040516112a69190612f7a565b60405180910390a3505b876101800151156113285760006112c8888489611936565b90506112d581888a61148c565b9150828873ffffffffffffffffffffffffffffffffffffffff167f18704ae982dcd24a1beeeed3ecf045ab0520d7b7519b97adf3e4f40bf7efe3398460405161131e9190612f7a565b60405180910390a3505b5050505050505050565b600061135f867f000000000000000000000000000000000000000000000000000000000000000089611a92565b60006040518060a001604052808888888888604051602001611385959493929190612c2b565b60405160208183030381529060405281526020013073ffffffffffffffffffffffffffffffffffffffff16815260200160c8426113c29190613185565b8152602001898152602001600081525090507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663c04b8d59826040518263ffffffff1660e01b815260040161142d9190612f20565b602060405180830381600087803b15801561144757600080fd5b505af115801561145b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061147f9190612638565b9150509695505050505050565b60008273ffffffffffffffffffffffffffffffffffffffff1663095ea7b37f0000000000000000000000000000000000000000000000000000000000000000866040518363ffffffff1660e01b81526004016114e9929190612d70565b602060405180830381600087803b15801561150357600080fd5b505af1158015611517573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061153b91906125e5565b506000600267ffffffffffffffff81111561157f577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156115ad5781602001602082028036833780820191505090505b50905083816000815181106115eb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508281600181518110611660577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166338ed1739866000843060c8426116e89190613185565b6040518663ffffffff1660e01b8152600401611708959493929190612fc5565b600060405180830381600087803b15801561172257600080fd5b505af1158015611736573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061175f91906125a4565b600181518110611798577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101519150509392505050565b60006117d7847f000000000000000000000000000000000000000000000000000000000000000087611a92565b60006040518061010001604052808673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1681526020018462ffffff1681526020013073ffffffffffffffffffffffffffffffffffffffff16815260200160c8426118519190613185565b815260200187815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663414bf389826040518263ffffffff1660e01b81526004016118d99190612f42565b602060405180830381600087803b1580156118f357600080fd5b505af1158015611907573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061192b9190612638565b915050949350505050565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663e6a4390586856040518363ffffffff1660e01b8152600401611994929190612cbc565b60206040518083038186803b1580156119ac57600080fd5b505afa1580156119c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119e49190612493565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611a56576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a4d90612e40565b60405180910390fd5b6000611a84857f00000000000000000000000000000000000000000000000000000000000000008887611be7565b905080925050509392505050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663095ea7b360e01b8585604051602401611ac7929190612d70565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051611b319190612c8a565b6000604051808303816000865af19150503d8060008114611b6e576040519150601f19603f3d011682016040523d82523d6000602084013e611b73565b606091505b5091509150818015611ba15750600081511480611ba0575080806020019051810190611b9f91906125e5565b5b5b611be0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bd790612e20565b60405180910390fd5b5050505050565b60008273ffffffffffffffffffffffffffffffffffffffff1663095ea7b385876040518363ffffffff1660e01b8152600401611c24929190612d70565b602060405180830381600087803b158015611c3e57600080fd5b505af1158015611c52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c7691906125e5565b5060006064605f611c898787878b611ef4565b611c93919061320c565b611c9d91906131db565b90506000600267ffffffffffffffff811115611ce2577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015611d105781602001602082028036833780820191505090505b5090508481600081518110611d4e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508381600181518110611dc3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505060008673ffffffffffffffffffffffffffffffffffffffff166338ed17398985853060c842611e2c9190613185565b6040518663ffffffff1660e01b8152600401611e4c95949392919061301f565b600060405180830381600087803b158015611e6657600080fd5b505af1158015611e7a573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611ea391906125a4565b600181518110611edc577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101519050809350505050949350505050565b600080600267ffffffffffffffff811115611f38577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015611f665781602001602082028036833780820191505090505b5090508481600081518110611fa4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508381600181518110612019577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508573ffffffffffffffffffffffffffffffffffffffff1663d06ca61f84836040518363ffffffff1660e01b815260040161208e929190612f95565b60006040518083038186803b1580156120a657600080fd5b505afa1580156120ba573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906120e391906125a4565b60018151811061211c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151915050949350505050565b600061214261213d8461309e565b613079565b9050808382526020820190508285602086028201111561216157600080fd5b60005b8581101561219157816121778882612455565b845260208401935060208301925050600181019050612164565b5050509392505050565b6000813590506121aa81613676565b92915050565b6000815190506121bf81613676565b92915050565b60008083601f8401126121d757600080fd5b8235905067ffffffffffffffff8111156121f057600080fd5b60208301915083602082028301111561220857600080fd5b9250929050565b60008083601f84011261222157600080fd5b8235905067ffffffffffffffff81111561223a57600080fd5b60208301915083602082028301111561225257600080fd5b9250929050565b600082601f83011261226a57600080fd5b815161227a84826020860161212f565b91505092915050565b6000813590506122928161368d565b92915050565b6000815190506122a78161368d565b92915050565b60008083601f8401126122bf57600080fd5b8235905067ffffffffffffffff8111156122d857600080fd5b6020830191508360018202830111156122f057600080fd5b9250929050565b60006101a0828403121561230a57600080fd5b6123156101a0613079565b905060006123258482850161219b565b60008301525060206123398482850161219b565b602083015250604061234d8482850161242b565b604083015250606061236184828501612440565b60608301525060806123758482850161242b565b60808301525060a06123898482850161219b565b60a08301525060c061239d84828501612283565b60c08301525060e06123b184828501612283565b60e0830152506101006123c684828501612283565b610100830152506101206123dc84828501612283565b610120830152506101406123f284828501612283565b6101408301525061016061240884828501612283565b6101608301525061018061241e84828501612283565b6101808301525092915050565b60008135905061243a816136a4565b92915050565b60008135905061244f816136bb565b92915050565b600081519050612464816136bb565b92915050565b60006020828403121561247c57600080fd5b600061248a8482850161219b565b91505092915050565b6000602082840312156124a557600080fd5b60006124b3848285016121b0565b91505092915050565b600080600080600080600080600060a08a8c0312156124da57600080fd5b60008a013567ffffffffffffffff8111156124f457600080fd5b6125008c828d016121c5565b995099505060208a013567ffffffffffffffff81111561251f57600080fd5b61252b8c828d0161220f565b975097505060408a013567ffffffffffffffff81111561254a57600080fd5b6125568c828d0161220f565b955095505060606125698c828d0161219b565b93505060808a013567ffffffffffffffff81111561258657600080fd5b6125928c828d016122ad565b92509250509295985092959850929598565b6000602082840312156125b657600080fd5b600082015167ffffffffffffffff8111156125d057600080fd5b6125dc84828501612259565b91505092915050565b6000602082840312156125f757600080fd5b600061260584828501612298565b91505092915050565b60006101a0828403121561262157600080fd5b600061262f848285016122f7565b91505092915050565b60006020828403121561264a57600080fd5b600061265884828501612455565b91505092915050565b600061266d8383612691565b60208301905092915050565b60006126858383612c0d565b60208301905092915050565b61269a81613266565b82525050565b6126a981613266565b82525050565b6126c06126bb82613266565b61341a565b82525050565b60006126d1826130ea565b6126db8185613125565b93506126e6836130ca565b8060005b838110156127175781516126fe8882612661565b97506127098361310b565b9250506001810190506126ea565b5085935050505092915050565b600061272f826130f5565b6127398185613136565b9350612744836130da565b8060005b8381101561277557815161275c8882612679565b975061276783613118565b925050600181019050612748565b5085935050505092915050565b61278b81613278565b82525050565b61279a81613278565b82525050565b60006127ab82613100565b6127b58185613147565b93506127c581856020860161336d565b6127ce816134dd565b840191505092915050565b60006127e482613100565b6127ee8185613158565b93506127fe81856020860161336d565b612807816134dd565b840191505092915050565b600061281d82613100565b6128278185613169565b935061283781856020860161336d565b80840191505092915050565b61284c816132cb565b82525050565b61285b816132ef565b82525050565b61286a81613313565b82525050565b61287981613337565b82525050565b6128888161335b565b82525050565b600061289b600283613174565b91506128a682613508565b602082019050919050565b60006128be600f83613174565b91506128c982613531565b602082019050919050565b60006128e1602683613174565b91506128ec8261355a565b604082019050919050565b6000612904602083613174565b915061290f826135a9565b602082019050919050565b6000612927601383613174565b9150612932826135d2565b602082019050919050565b600061294a600883613174565b9150612955826135fb565b602082019050919050565b600061296d600c83613174565b915061297882613624565b602082019050919050565b6000612990601f83613174565b915061299b8261364d565b602082019050919050565b600060a08301600083015184820360008601526129c382826127a0565b91505060208301516129d86020860182612691565b5060408301516129eb6040860182612c0d565b5060608301516129fe6060860182612c0d565b506080830151612a116080860182612c0d565b508091505092915050565b61010082016000820151612a336000850182612691565b506020820151612a466020850182612691565b506040820151612a596040850182612be7565b506060820151612a6c6060850182612691565b506080820151612a7f6080850182612c0d565b5060a0820151612a9260a0850182612c0d565b5060c0820151612aa560c0850182612c0d565b5060e0820151612ab860e0850182612bc9565b50505050565b6101a082016000820151612ad56000850182612691565b506020820151612ae86020850182612691565b506040820151612afb6040850182612be7565b506060820151612b0e6060850182612c0d565b506080820151612b216080850182612be7565b5060a0820151612b3460a0850182612691565b5060c0820151612b4760c0850182612782565b5060e0820151612b5a60e0850182612782565b50610100820151612b6f610100850182612782565b50610120820151612b84610120850182612782565b50610140820151612b99610140850182612782565b50610160820151612bae610160850182612782565b50610180820151612bc3610180850182612782565b50505050565b612bd281613292565b82525050565b612be181613284565b82525050565b612bf0816132b2565b82525050565b612c07612c02826132b2565b61343e565b82525050565b612c16816132c1565b82525050565b612c25816132c1565b82525050565b6000612c3782886126af565b601482019150612c478287612bf6565b600382019150612c5782866126af565b601482019150612c678285612bf6565b600382019150612c7782846126af565b6014820191508190509695505050505050565b6000612c968284612812565b915081905092915050565b6000602082019050612cb660008301846126a0565b92915050565b6000604082019050612cd160008301856126a0565b612cde60208301846126a0565b9392505050565b600060e082019050612cfa600083018a6126a0565b8181036020830152612d0c81896126c6565b90508181036040830152612d208188612724565b90508181036060830152612d348187612724565b9050612d4360808301866126a0565b81810360a0830152612d5581856127d9565b9050612d6460c0830184612bd8565b98975050505050505050565b6000604082019050612d8560008301856126a0565b612d926020830184612c1c565b9392505050565b6000602082019050612dae6000830184612791565b92915050565b6000602082019050612dc96000830184612843565b92915050565b6000602082019050612de46000830184612852565b92915050565b6000602082019050612dff6000830184612861565b92915050565b6000602082019050612e1a6000830184612870565b92915050565b60006020820190508181036000830152612e398161288e565b9050919050565b60006020820190508181036000830152612e59816128b1565b9050919050565b60006020820190508181036000830152612e79816128d4565b9050919050565b60006020820190508181036000830152612e99816128f7565b9050919050565b60006020820190508181036000830152612eb98161291a565b9050919050565b60006020820190508181036000830152612ed98161293d565b9050919050565b60006020820190508181036000830152612ef981612960565b9050919050565b60006020820190508181036000830152612f1981612983565b9050919050565b60006020820190508181036000830152612f3a81846129a6565b905092915050565b600061010082019050612f586000830184612a1c565b92915050565b60006101a082019050612f746000830184612abe565b92915050565b6000602082019050612f8f6000830184612c1c565b92915050565b6000604082019050612faa6000830185612c1c565b8181036020830152612fbc81846126c6565b90509392505050565b600060a082019050612fda6000830188612c1c565b612fe7602083018761287f565b8181036040830152612ff981866126c6565b905061300860608301856126a0565b6130156080830184612c1c565b9695505050505050565b600060a0820190506130346000830188612c1c565b6130416020830187612c1c565b818103604083015261305381866126c6565b905061306260608301856126a0565b61306f6080830184612c1c565b9695505050505050565b6000613083613094565b905061308f82826133a0565b919050565b6000604051905090565b600067ffffffffffffffff8211156130b9576130b86134ae565b5b602082029050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b6000613190826132c1565b915061319b836132c1565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156131d0576131cf613450565b5b828201905092915050565b60006131e6826132c1565b91506131f1836132c1565b9250826132015761320061347f565b5b828204905092915050565b6000613217826132c1565b9150613222836132c1565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561325b5761325a613450565b5b828202905092915050565b600061327182613292565b9050919050565b60008115159050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062ffffff82169050919050565b6000819050919050565b60006132d6826132dd565b9050919050565b60006132e882613292565b9050919050565b60006132fa82613301565b9050919050565b600061330c82613292565b9050919050565b600061331e82613325565b9050919050565b600061333082613292565b9050919050565b600061334282613349565b9050919050565b600061335482613292565b9050919050565b6000613366826132c1565b9050919050565b60005b8381101561338b578082015181840152602081019050613370565b8381111561339a576000848401525b50505050565b6133a9826134dd565b810181811067ffffffffffffffff821117156133c8576133c76134ae565b5b80604052505050565b60006133dc826132c1565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561340f5761340e613450565b5b600182019050919050565b60006134258261342c565b9050919050565b6000613437826134fb565b9050919050565b6000613449826134ee565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160e81b9050919050565b60008160601b9050919050565b7f5341000000000000000000000000000000000000000000000000000000000000600082015250565b7f506f6f6c206e6f7420666f756e64210000000000000000000000000000000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f746f6b656e42616c616e6365206572726f722100000000000000000000000000600082015250565b7f4e6f7420706f6f6c000000000000000000000000000000000000000000000000600082015250565b7f5a65726f2062616c616e63650000000000000000000000000000000000000000600082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b61367f81613266565b811461368a57600080fd5b50565b61369681613278565b81146136a157600080fd5b50565b6136ad816132b2565b81146136b857600080fd5b50565b6136c4816132c1565b81146136cf57600080fd5b5056fea26469706673582212201d6627d137f5b9b16236dcd11108c234b519bdae92531266ec0f3708ab24237864736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c80637535d246116100665780637535d246146101215780638d252c621461013f5780638da5cb5b1461015d578063920f5c841461017b578063f2fde38b146101ab5761009e565b80630542975c146100a35780630cbc9759146100c15780632c76d7a6146100dd57806351cff8d9146100fb578063715018a614610117575b600080fd5b6100ab6101c7565b6040516100b89190612db4565b60405180910390f35b6100db60048036038101906100d6919061260e565b6101eb565b005b6100e5610454565b6040516100f29190612dea565b60405180910390f35b6101156004803603810190610110919061246a565b610478565b005b61011f61076e565b005b6101296107f6565b6040516101369190612dcf565b60405180910390f35b61014761081a565b6040516101549190612e05565b60405180910390f35b61016561083e565b6040516101729190612ca1565b60405180910390f35b610195600480360381019061019091906124bc565b610867565b6040516101a29190612d99565b60405180910390f35b6101c560048036038101906101c0919061246a565b610c25565b005b7f000000000000000000000000000000000000000000000000000000000000000081565b6101f3610d1d565b73ffffffffffffffffffffffffffffffffffffffff1661021161083e565b73ffffffffffffffffffffffffffffffffffffffff1614610267576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161025e90612e80565b60405180910390fd5b60008160000151905060008260600151905060008360405160200161028c9190612f5e565b60405160208183030381529060405290506000600167ffffffffffffffff8111156102e0577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561030e5781602001602082028036833780820191505090505b509050838160008151811061034c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506000600167ffffffffffffffff8111156103c9577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156103f75781602001602082028036833780820191505090505b5090508381600081518110610435577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101818152505061044c828285610d25565b505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b610480610d1d565b73ffffffffffffffffffffffffffffffffffffffff1661049e61083e565b73ffffffffffffffffffffffffffffffffffffffff16146104f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104eb90612e80565b60405180910390fd5b6002600154141561053a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053190612f00565b60405180910390fd5b600260018190555060008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156105e45760003090508073ffffffffffffffffffffffffffffffffffffffff163191503373ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f193505050501580156105dd573d6000803e3d6000fd5b50506106fe565b8173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161061d9190612ca1565b60206040518083038186803b15801561063557600080fd5b505afa158015610649573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066d9190612638565b90508173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016106aa929190612d70565b602060405180830381600087803b1580156106c457600080fd5b505af11580156106d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106fc91906125e5565b505b8173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f9207361cc2a04b9c7a06691df1eb87c6a63957ae88bf01d0d18c81e3d12720998360405161075b9190612f7a565b60405180910390a3506001808190555050565b610776610d1d565b73ffffffffffffffffffffffffffffffffffffffff1661079461083e565b73ffffffffffffffffffffffffffffffffffffffff16146107ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107e190612e80565b60405180910390fd5b6107f46000610eab565b565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000808a8a60008181106108a4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020160208101906108b9919061246a565b90506000898960008181106108f7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020135905060008888600081811061093c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002013590507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146109d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ca90612ec0565b60405180910390fd5b60008373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610a0e9190612ca1565b60206040518083038186803b158015610a2657600080fd5b505afa158015610a3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a5e9190612638565b905060008311610aa3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a9a90612ee0565b60405180910390fd5b828114610ae5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610adc90612ea0565b60405180910390fd5b828473ffffffffffffffffffffffffffffffffffffffff167f2e30dc796dffed39db84c7dd3248c08d1852da65e0e3da58b6cde0d73844133784604051610b2c9190612f7a565b60405180910390a360008787810190610b45919061260e565b9050610b5081610f6f565b60008385610b5e9190613185565b90508573ffffffffffffffffffffffffffffffffffffffff1663095ea7b37f0000000000000000000000000000000000000000000000000000000000000000836040518363ffffffff1660e01b8152600401610bbb929190612d70565b602060405180830381600087803b158015610bd557600080fd5b505af1158015610be9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c0d91906125e5565b50600196505050505050509998505050505050505050565b610c2d610d1d565b73ffffffffffffffffffffffffffffffffffffffff16610c4b61083e565b73ffffffffffffffffffffffffffffffffffffffff1614610ca1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9890612e80565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610d11576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d0890612e60565b60405180910390fd5b610d1a81610eab565b50565b600033905090565b60003090506000309050600080865167ffffffffffffffff811115610d73577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015610da15781602001602082028036833780820191505090505b50905060005b8751811015610e0a576000828281518110610deb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250508080610e02906133d1565b915050610da7565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663ab9c4b5d85898985888b896040518863ffffffff1660e01b8152600401610e709796959493929190612ce5565b600060405180830381600087803b158015610e8a57600080fd5b505af1158015610e9e573d6000803e3d6000fd5b5050505050505050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60008160000151905060008260200151905060008360400151905060008460a00151905060008560800151905060008660600151905060008760c0015115611055576000610fc183898888888c611332565b90508673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16146110045761100181888a61148c565b91505b828873ffffffffffffffffffffffffffffffffffffffff167f18704ae982dcd24a1beeeed3ecf045ab0520d7b7519b97adf3e4f40bf7efe3398460405161104b9190612f7a565b60405180910390a3505b8760e00151156110cd57600061106d838989896117aa565b905061107a81888a61148c565b9150828873ffffffffffffffffffffffffffffffffffffffff167f18704ae982dcd24a1beeeed3ecf045ab0520d7b7519b97adf3e4f40bf7efe339846040516110c39190612f7a565b60405180910390a3505b876101000151156111465760006110e6838989896117aa565b90506110f387828a611936565b9150828873ffffffffffffffffffffffffffffffffffffffff167f18704ae982dcd24a1beeeed3ecf045ab0520d7b7519b97adf3e4f40bf7efe3398460405161113c9190612f7a565b60405180910390a3505b876101200151156111bf57600061115e83898961148c565b905061116c81888a896117aa565b9150828873ffffffffffffffffffffffffffffffffffffffff167f18704ae982dcd24a1beeeed3ecf045ab0520d7b7519b97adf3e4f40bf7efe339846040516111b59190612f7a565b60405180910390a3505b876101400151156112375760006111d783898961148c565b90506111e487828a611936565b9150828873ffffffffffffffffffffffffffffffffffffffff167f18704ae982dcd24a1beeeed3ecf045ab0520d7b7519b97adf3e4f40bf7efe3398460405161122d9190612f7a565b60405180910390a3505b876101600151156112b057600061124f888489611936565b905061125d81888a896117aa565b9150828873ffffffffffffffffffffffffffffffffffffffff167f18704ae982dcd24a1beeeed3ecf045ab0520d7b7519b97adf3e4f40bf7efe339846040516112a69190612f7a565b60405180910390a3505b876101800151156113285760006112c8888489611936565b90506112d581888a61148c565b9150828873ffffffffffffffffffffffffffffffffffffffff167f18704ae982dcd24a1beeeed3ecf045ab0520d7b7519b97adf3e4f40bf7efe3398460405161131e9190612f7a565b60405180910390a3505b5050505050505050565b600061135f867f000000000000000000000000000000000000000000000000000000000000000089611a92565b60006040518060a001604052808888888888604051602001611385959493929190612c2b565b60405160208183030381529060405281526020013073ffffffffffffffffffffffffffffffffffffffff16815260200160c8426113c29190613185565b8152602001898152602001600081525090507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663c04b8d59826040518263ffffffff1660e01b815260040161142d9190612f20565b602060405180830381600087803b15801561144757600080fd5b505af115801561145b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061147f9190612638565b9150509695505050505050565b60008273ffffffffffffffffffffffffffffffffffffffff1663095ea7b37f0000000000000000000000000000000000000000000000000000000000000000866040518363ffffffff1660e01b81526004016114e9929190612d70565b602060405180830381600087803b15801561150357600080fd5b505af1158015611517573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061153b91906125e5565b506000600267ffffffffffffffff81111561157f577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156115ad5781602001602082028036833780820191505090505b50905083816000815181106115eb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508281600181518110611660577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166338ed1739866000843060c8426116e89190613185565b6040518663ffffffff1660e01b8152600401611708959493929190612fc5565b600060405180830381600087803b15801561172257600080fd5b505af1158015611736573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061175f91906125a4565b600181518110611798577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101519150509392505050565b60006117d7847f000000000000000000000000000000000000000000000000000000000000000087611a92565b60006040518061010001604052808673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1681526020018462ffffff1681526020013073ffffffffffffffffffffffffffffffffffffffff16815260200160c8426118519190613185565b815260200187815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663414bf389826040518263ffffffff1660e01b81526004016118d99190612f42565b602060405180830381600087803b1580156118f357600080fd5b505af1158015611907573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061192b9190612638565b915050949350505050565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663e6a4390586856040518363ffffffff1660e01b8152600401611994929190612cbc565b60206040518083038186803b1580156119ac57600080fd5b505afa1580156119c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119e49190612493565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611a56576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a4d90612e40565b60405180910390fd5b6000611a84857f00000000000000000000000000000000000000000000000000000000000000008887611be7565b905080925050509392505050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663095ea7b360e01b8585604051602401611ac7929190612d70565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051611b319190612c8a565b6000604051808303816000865af19150503d8060008114611b6e576040519150601f19603f3d011682016040523d82523d6000602084013e611b73565b606091505b5091509150818015611ba15750600081511480611ba0575080806020019051810190611b9f91906125e5565b5b5b611be0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bd790612e20565b60405180910390fd5b5050505050565b60008273ffffffffffffffffffffffffffffffffffffffff1663095ea7b385876040518363ffffffff1660e01b8152600401611c24929190612d70565b602060405180830381600087803b158015611c3e57600080fd5b505af1158015611c52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c7691906125e5565b5060006064605f611c898787878b611ef4565b611c93919061320c565b611c9d91906131db565b90506000600267ffffffffffffffff811115611ce2577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015611d105781602001602082028036833780820191505090505b5090508481600081518110611d4e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508381600181518110611dc3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505060008673ffffffffffffffffffffffffffffffffffffffff166338ed17398985853060c842611e2c9190613185565b6040518663ffffffff1660e01b8152600401611e4c95949392919061301f565b600060405180830381600087803b158015611e6657600080fd5b505af1158015611e7a573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611ea391906125a4565b600181518110611edc577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101519050809350505050949350505050565b600080600267ffffffffffffffff811115611f38577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015611f665781602001602082028036833780820191505090505b5090508481600081518110611fa4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508381600181518110612019577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508573ffffffffffffffffffffffffffffffffffffffff1663d06ca61f84836040518363ffffffff1660e01b815260040161208e929190612f95565b60006040518083038186803b1580156120a657600080fd5b505afa1580156120ba573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906120e391906125a4565b60018151811061211c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151915050949350505050565b600061214261213d8461309e565b613079565b9050808382526020820190508285602086028201111561216157600080fd5b60005b8581101561219157816121778882612455565b845260208401935060208301925050600181019050612164565b5050509392505050565b6000813590506121aa81613676565b92915050565b6000815190506121bf81613676565b92915050565b60008083601f8401126121d757600080fd5b8235905067ffffffffffffffff8111156121f057600080fd5b60208301915083602082028301111561220857600080fd5b9250929050565b60008083601f84011261222157600080fd5b8235905067ffffffffffffffff81111561223a57600080fd5b60208301915083602082028301111561225257600080fd5b9250929050565b600082601f83011261226a57600080fd5b815161227a84826020860161212f565b91505092915050565b6000813590506122928161368d565b92915050565b6000815190506122a78161368d565b92915050565b60008083601f8401126122bf57600080fd5b8235905067ffffffffffffffff8111156122d857600080fd5b6020830191508360018202830111156122f057600080fd5b9250929050565b60006101a0828403121561230a57600080fd5b6123156101a0613079565b905060006123258482850161219b565b60008301525060206123398482850161219b565b602083015250604061234d8482850161242b565b604083015250606061236184828501612440565b60608301525060806123758482850161242b565b60808301525060a06123898482850161219b565b60a08301525060c061239d84828501612283565b60c08301525060e06123b184828501612283565b60e0830152506101006123c684828501612283565b610100830152506101206123dc84828501612283565b610120830152506101406123f284828501612283565b6101408301525061016061240884828501612283565b6101608301525061018061241e84828501612283565b6101808301525092915050565b60008135905061243a816136a4565b92915050565b60008135905061244f816136bb565b92915050565b600081519050612464816136bb565b92915050565b60006020828403121561247c57600080fd5b600061248a8482850161219b565b91505092915050565b6000602082840312156124a557600080fd5b60006124b3848285016121b0565b91505092915050565b600080600080600080600080600060a08a8c0312156124da57600080fd5b60008a013567ffffffffffffffff8111156124f457600080fd5b6125008c828d016121c5565b995099505060208a013567ffffffffffffffff81111561251f57600080fd5b61252b8c828d0161220f565b975097505060408a013567ffffffffffffffff81111561254a57600080fd5b6125568c828d0161220f565b955095505060606125698c828d0161219b565b93505060808a013567ffffffffffffffff81111561258657600080fd5b6125928c828d016122ad565b92509250509295985092959850929598565b6000602082840312156125b657600080fd5b600082015167ffffffffffffffff8111156125d057600080fd5b6125dc84828501612259565b91505092915050565b6000602082840312156125f757600080fd5b600061260584828501612298565b91505092915050565b60006101a0828403121561262157600080fd5b600061262f848285016122f7565b91505092915050565b60006020828403121561264a57600080fd5b600061265884828501612455565b91505092915050565b600061266d8383612691565b60208301905092915050565b60006126858383612c0d565b60208301905092915050565b61269a81613266565b82525050565b6126a981613266565b82525050565b6126c06126bb82613266565b61341a565b82525050565b60006126d1826130ea565b6126db8185613125565b93506126e6836130ca565b8060005b838110156127175781516126fe8882612661565b97506127098361310b565b9250506001810190506126ea565b5085935050505092915050565b600061272f826130f5565b6127398185613136565b9350612744836130da565b8060005b8381101561277557815161275c8882612679565b975061276783613118565b925050600181019050612748565b5085935050505092915050565b61278b81613278565b82525050565b61279a81613278565b82525050565b60006127ab82613100565b6127b58185613147565b93506127c581856020860161336d565b6127ce816134dd565b840191505092915050565b60006127e482613100565b6127ee8185613158565b93506127fe81856020860161336d565b612807816134dd565b840191505092915050565b600061281d82613100565b6128278185613169565b935061283781856020860161336d565b80840191505092915050565b61284c816132cb565b82525050565b61285b816132ef565b82525050565b61286a81613313565b82525050565b61287981613337565b82525050565b6128888161335b565b82525050565b600061289b600283613174565b91506128a682613508565b602082019050919050565b60006128be600f83613174565b91506128c982613531565b602082019050919050565b60006128e1602683613174565b91506128ec8261355a565b604082019050919050565b6000612904602083613174565b915061290f826135a9565b602082019050919050565b6000612927601383613174565b9150612932826135d2565b602082019050919050565b600061294a600883613174565b9150612955826135fb565b602082019050919050565b600061296d600c83613174565b915061297882613624565b602082019050919050565b6000612990601f83613174565b915061299b8261364d565b602082019050919050565b600060a08301600083015184820360008601526129c382826127a0565b91505060208301516129d86020860182612691565b5060408301516129eb6040860182612c0d565b5060608301516129fe6060860182612c0d565b506080830151612a116080860182612c0d565b508091505092915050565b61010082016000820151612a336000850182612691565b506020820151612a466020850182612691565b506040820151612a596040850182612be7565b506060820151612a6c6060850182612691565b506080820151612a7f6080850182612c0d565b5060a0820151612a9260a0850182612c0d565b5060c0820151612aa560c0850182612c0d565b5060e0820151612ab860e0850182612bc9565b50505050565b6101a082016000820151612ad56000850182612691565b506020820151612ae86020850182612691565b506040820151612afb6040850182612be7565b506060820151612b0e6060850182612c0d565b506080820151612b216080850182612be7565b5060a0820151612b3460a0850182612691565b5060c0820151612b4760c0850182612782565b5060e0820151612b5a60e0850182612782565b50610100820151612b6f610100850182612782565b50610120820151612b84610120850182612782565b50610140820151612b99610140850182612782565b50610160820151612bae610160850182612782565b50610180820151612bc3610180850182612782565b50505050565b612bd281613292565b82525050565b612be181613284565b82525050565b612bf0816132b2565b82525050565b612c07612c02826132b2565b61343e565b82525050565b612c16816132c1565b82525050565b612c25816132c1565b82525050565b6000612c3782886126af565b601482019150612c478287612bf6565b600382019150612c5782866126af565b601482019150612c678285612bf6565b600382019150612c7782846126af565b6014820191508190509695505050505050565b6000612c968284612812565b915081905092915050565b6000602082019050612cb660008301846126a0565b92915050565b6000604082019050612cd160008301856126a0565b612cde60208301846126a0565b9392505050565b600060e082019050612cfa600083018a6126a0565b8181036020830152612d0c81896126c6565b90508181036040830152612d208188612724565b90508181036060830152612d348187612724565b9050612d4360808301866126a0565b81810360a0830152612d5581856127d9565b9050612d6460c0830184612bd8565b98975050505050505050565b6000604082019050612d8560008301856126a0565b612d926020830184612c1c565b9392505050565b6000602082019050612dae6000830184612791565b92915050565b6000602082019050612dc96000830184612843565b92915050565b6000602082019050612de46000830184612852565b92915050565b6000602082019050612dff6000830184612861565b92915050565b6000602082019050612e1a6000830184612870565b92915050565b60006020820190508181036000830152612e398161288e565b9050919050565b60006020820190508181036000830152612e59816128b1565b9050919050565b60006020820190508181036000830152612e79816128d4565b9050919050565b60006020820190508181036000830152612e99816128f7565b9050919050565b60006020820190508181036000830152612eb98161291a565b9050919050565b60006020820190508181036000830152612ed98161293d565b9050919050565b60006020820190508181036000830152612ef981612960565b9050919050565b60006020820190508181036000830152612f1981612983565b9050919050565b60006020820190508181036000830152612f3a81846129a6565b905092915050565b600061010082019050612f586000830184612a1c565b92915050565b60006101a082019050612f746000830184612abe565b92915050565b6000602082019050612f8f6000830184612c1c565b92915050565b6000604082019050612faa6000830185612c1c565b8181036020830152612fbc81846126c6565b90509392505050565b600060a082019050612fda6000830188612c1c565b612fe7602083018761287f565b8181036040830152612ff981866126c6565b905061300860608301856126a0565b6130156080830184612c1c565b9695505050505050565b600060a0820190506130346000830188612c1c565b6130416020830187612c1c565b818103604083015261305381866126c6565b905061306260608301856126a0565b61306f6080830184612c1c565b9695505050505050565b6000613083613094565b905061308f82826133a0565b919050565b6000604051905090565b600067ffffffffffffffff8211156130b9576130b86134ae565b5b602082029050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b6000613190826132c1565b915061319b836132c1565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156131d0576131cf613450565b5b828201905092915050565b60006131e6826132c1565b91506131f1836132c1565b9250826132015761320061347f565b5b828204905092915050565b6000613217826132c1565b9150613222836132c1565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561325b5761325a613450565b5b828202905092915050565b600061327182613292565b9050919050565b60008115159050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062ffffff82169050919050565b6000819050919050565b60006132d6826132dd565b9050919050565b60006132e882613292565b9050919050565b60006132fa82613301565b9050919050565b600061330c82613292565b9050919050565b600061331e82613325565b9050919050565b600061333082613292565b9050919050565b600061334282613349565b9050919050565b600061335482613292565b9050919050565b6000613366826132c1565b9050919050565b60005b8381101561338b578082015181840152602081019050613370565b8381111561339a576000848401525b50505050565b6133a9826134dd565b810181811067ffffffffffffffff821117156133c8576133c76134ae565b5b80604052505050565b60006133dc826132c1565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561340f5761340e613450565b5b600182019050919050565b60006134258261342c565b9050919050565b6000613437826134fb565b9050919050565b6000613449826134ee565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160e81b9050919050565b60008160601b9050919050565b7f5341000000000000000000000000000000000000000000000000000000000000600082015250565b7f506f6f6c206e6f7420666f756e64210000000000000000000000000000000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f746f6b656e42616c616e6365206572726f722100000000000000000000000000600082015250565b7f4e6f7420706f6f6c000000000000000000000000000000000000000000000000600082015250565b7f5a65726f2062616c616e63650000000000000000000000000000000000000000600082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b61367f81613266565b811461368a57600080fd5b50565b61369681613278565b81146136a157600080fd5b50565b6136ad816132b2565b81146136b857600080fd5b50565b6136c4816132c1565b81146136cf57600080fd5b5056fea26469706673582212201d6627d137f5b9b16236dcd11108c234b519bdae92531266ec0f3708ab24237864736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdraw(address)": {
        "details": "Withdraw asset.",
        "params": {
          "_assetAddress": "Asset to be withdrawn."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/AaveUniQuick.sol:AaveUniQuick",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 115,
        "contract": "contracts/AaveUniQuick.sol:AaveUniQuick",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}